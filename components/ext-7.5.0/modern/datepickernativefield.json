{
  "xtype": "datepickernativefield",
  "name": "Ext.field.DatePickerNative",
  "extends": "Ext.field.Date",
  "extended": "Ext.field.Date,Ext.field.Picker,Ext.field.Text,Ext.field.Input,Ext.field.Field,Ext.Component,Ext.Widget,Ext.Evented,Ext.Base",
  "primaryCollection": "na",
  "primaryCollectionBaseType": "na",
  "numConfigs": 153,
  "numMethods": 257,
  "numEvents": 66,
  "configs": [
    {
      "name": "alignSelf",
      "type": "String",
      "defaultValue": "null",
      "description": "Specifies the self alignment of this widget in a box layout\n"
    },
    {
      "name": "alignTarget",
      "type": "String",
      "defaultValue": "'bodyElement'",
      "description": "The element reference to which the {@link #cfg!picker} aligns\nand sizes to. By default, it sizes to the `bodyElement` which encapsulates the\ninput field and triggers.\n\nAn alternate value which may be useful if using `{@link #cfg!floated floated}` pickers on phone platforms\ncould be `el`, to align the picker to the field's encapsulating element.\n"
    },
    {
      "name": "altFormats",
      "type": "String/String[]",
      "defaultValue": "'m/d/Y|' + 'n/j/Y|' + 'n/j/y|' + 'm/j/y|' + 'n/d/y|' + 'm/j/Y|' + 'n/d/Y|' + 'm-d-y|' + 'm-d-Y|' + 'm/d|' + 'm-d|' + 'md|' + 'mdy|' + 'mdY|' + 'd|' + 'Y-m-d|' + 'n-j|' + 'n/j'",
      "description": "Multiple date formats separated by \"|\" or an array of date formats\nto try when parsing a user input value and it doesn't match the defined format.\n"
    },
    {
      "name": "alwaysOnTop",
      "type": "Boolean/Number",
      "defaultValue": "false",
      "description": "A flag indicating that this component should\nbe above its floated siblings.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on\ntop components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the\nz-index stack.\n"
    },
    {
      "name": "animateUnderline",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "'true' to animate the underline of a field when focused\n"
    },
    {
      "name": "ariaAttributes",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n"
    },
    {
      "name": "ariaDescribedBy",
      "type": "String",
      "description": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n"
    },
    {
      "name": "ariaLabel",
      "type": "String",
      "description": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n"
    },
    {
      "name": "ariaLabelledBy",
      "type": "String",
      "description": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n"
    },
    {
      "name": "autoCapitalize",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "True to set the field's DOM element auto-capitalize attribute to \"on\", false to\nset to \"off\".\n"
    },
    {
      "name": "autoComplete",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Autocomplete is disabled on Picker fields by default.\n"
    },
    {
      "name": "autoCorrect",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "True to set the field DOM element autocorrect attribute to \"on\", false to set to \"off\".\n"
    },
    {
      "name": "autoFitErrors",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "Whether to adjust the field's body width to make room for the\n{@link #cfg!errorTarget error messages}.\n"
    },
    {
      "name": "autoHideInputMask",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "Specify as `false` to always show the `{@link #cfg!inputMask inputMask}`.\n"
    },
    {
      "name": "axisLock",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "If `true`, then, when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo} fallback on\nconstraint violation only takes place along the major align axis.\n\nThat is, if alignment `\"l-r\"` is being used, and `axisLock: true` is used,\nthen if constraints fail, only fallback to `\"r-l\"` is considered.\n"
    },
    {
      "name": "badFormatMessage",
      "type": "String",
      "defaultValue": "'Value does not match the required format'",
      "description": "The error message that will be displayed if the value cannot be parsed (for some\nderived types) or if the value does not match a configured {@link #cfg!inputMask #inputMask}.\n"
    },
    {
      "name": "bind",
      "type": "Object/String",
      "defaultValue": "null",
      "description": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property!defaultBindProperty Ext.Component#property-defaultBindProperty} for the binding.\n"
    },
    {
      "name": "bodyAlign",
      "defaultValue": "'stretch'"
    },
    {
      "name": "border",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Enables or disables bordering on this component.\nThe following values are accepted:\n\n- `null` or `true (default): Do nothing and allow the border to be specified\nby the theme.\n- `false`: suppress the default border provided by the theme.\n\nPlease note that enabling bordering via this config will not add a `border-color`\nor `border-style` CSS property to the component; you provide the `border-color`\nand `border-style` via CSS rule or {@link #cfg!style #style} configuration\n(if not already provide by the theme).\n\n## Using {@link #cfg!style #style}:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        style: 'border: 1px solid blue;'\n        // ...\n    });\n\n## Using CSS:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        cls: 'my-component'\n        // ...\n    });\n\nAnd your CSS file:\n\n    .my-component {\n        border: 1px solid red;\n    }\n"
    },
    {
      "name": "bottom",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute bottom position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "bubbleDirty",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "Set to `false` to disable dirty states affecting ancestor containers such as\n`fieldpanel` or `formpanel`. The dirty state of such containers is based on the\npresence of dirty descendants. In some cases, however, it may be desired to\nhide the dirty state of one of these containers from its ancestor containers.\n"
    },
    {
      "name": "centered",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Configure this as `true` to have this Component centered within its Container.\nSetting this value to `true` will make this Component become 'positioned', which means\nit will no longer participate in the layout of the Container that it resides in.\n"
    },
    {
      "name": "clearable",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "`true` to show a clear trigger in this field when it has a non-empty value\n"
    },
    {
      "name": "cls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "The CSS class to add to this widget's element, in\naddition to the {@link #property!baseCls #baseCls}. In many cases, this property will be specified\nby the derived widget class. See {@link #cfg!userCls #userCls} for adding additional CSS\nclasses to widget instances (such as items in a {@link Ext.Container}).\n"
    },
    {
      "name": "constrainAlign",
      "type": "String/Ext.util.Region/Ext.dom.Element",
      "defaultValue": "null",
      "description": "A specification of the constraint to apply when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo}\nis called to align a {@link #cfg!floated #floated} or positioned component.\n\nDefaults to the parent container for *positioned* components (components\nwhich have their {@link #cfg!top}, {@link #cfg!right}, {@link #cfg!bottom} or\n{@link #cfg!left} set to move them out of their container's layout flow).\n\nDefaults to the viewport for {@link #cfg!floated #floated} components.\n\nMay be a {@link Ext.ComponentQuery} selector to find an ancestor\ncomponent to constrain within.\n\nMay be `false` to specify that constraining is not applied.\n\nYou may also specify an element, or a {@link Ext.util.Region}\n"
    },
    {
      "name": "contentEl",
      "type": "Ext.dom.Element/HTMLElement/String",
      "defaultValue": "null",
      "description": "The configured element will automatically be added as the content of this\ncomponent. When you pass a string, we expect it to be an element id. If the\ncontent element is hidden, we will automatically show it.\n"
    },
    {
      "name": "controller",
      "type": "String/Object/Ext.app.ViewController",
      "defaultValue": "null",
      "description": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n"
    },
    {
      "name": "data",
      "type": "Object",
      "defaultValue": "null",
      "description": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to\nupdate the content area of the Component.\n\n**Note:** Data will be appended to any existing data.\n"
    },
    {
      "name": "dataType",
      "type": "Ext.data.field.Field/Object/String",
      "defaultValue": "null",
      "description": "A config for a {@link Ext.data.field.Field} or data field sub-class instance\nused to serialize this field's value for form submission. This is used by the\n{@link #method!serialize #serialize} method unless `{@link #cfg!modelValidation modelValidation}` is used, in which case, the\ndata field of the bound {@link Ext.data.Model} is used.\n\nFor example:\n\n     {\n         xtype: 'datefield',\n         dataType: {\n             // type: 'date'  (datefield does this by default)\n             dateWriteFormat: 'Y-m-d'\n         }\n     }\n\nIf this config is a string, it is used to create a {@link Ext.data.field.Field}\nby that alias.\n"
    },
    {
      "name": "dateFormat",
      "type": "String",
      "defaultValue": "Ext.util.Format.defaultDateFormat",
      "description": "The format to be\nused when displaying the date in this field. Accepts any valid date format. You\ncan view formats over in the {@link Ext.Date} documentation.\n"
    },
    {
      "name": "defaultListenerScope",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n"
    },
    {
      "name": "destroyPickerOnHide",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Whether or not to destroy the picker widget on hide. This save memory if it's\nnot used frequently, but increase delay time on the next show due to\nre-instantiation.\n"
    },
    {
      "name": "dirty",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "This config property describes the modified state of this component. In most\ncases this config's value is maintained by the component and should be considered\nreadonly. The class implementor should be the only one to call the setter.\n\nFor containers, this config will be updated on a short delay in some cases.\n"
    },
    {
      "name": "disabled",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to disable the field.\n\nBe aware that conformant with the [HTML specification](http://www.w3.org/TR/html401/interact/forms.html),\ndisabled Fields will not be {@link Ext.form.Panel#method!submit submitted}.\n"
    },
    {
      "name": "displayed",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Set to `true` to call `show` and `false` to call `hide`. Unlike the `{@link #cfg!hidden hidden}`\nconfig, changing this config will potentially involve animations to show or\nhide the component.\n"
    },
    {
      "name": "docked",
      "type": "String",
      "defaultValue": "null",
      "description": "The dock position of this component in its container. Can be `{@link #cfg!left left}`, `{@link #cfg!top top}`, `{@link #cfg!right right}` or\n`{@link #cfg!bottom bottom}`.\n\n__Notes__\n\nYou must use a HTML5 doctype for {@link #cfg!docked #docked} `{@link #cfg!bottom bottom}` to work. To do this, simply\nadd the following code to the HTML file:\n\n    <!doctype html>\n\nSo your index.html file should look a little like this:\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>MY application title</title>\n            ...\n"
    },
    {
      "name": "draggable",
      "type": "Boolean/Object/Ext.drag.Source",
      "defaultValue": "null",
      "description": "Set to `true` to allow this component to be dragged. This can also be the config\nobject for the `{@link Ext.drag.Source}` that will manage the drag.\n"
    },
    {
      "name": "edgePicker",
      "type": "Object",
      "defaultValue": "null",
      "description": "A configuration object, containing an {@link cfg#xtype} property which specifies\nthe widget to create if `{@link #cfg!picker}: 'edge'` (or if it's '`auto'` and the\napp is on a phone).\n\nReplaces `defaultPhonePicker`\n"
    },
    {
      "name": "editable",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "Configure as `false` to prevent the user from typing text directly into the\nfield; the field can only have its value set programmatically or via an action\ninvoked by a trigger.\n\nContrast with {@link #cfg!readOnly} which disables all mutation via the UI.\n"
    },
    {
      "name": "enterAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'.\n"
    },
    {
      "name": "error",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "The error (or errors) to display for this field. This config is typically set\nby the field's {@link #cfg!validators} but can be set directly if\nan error needs to be associated with a field manually.\n\nErrors will be HTML encoded as necessary and {@link #cfg!errorTpl}\nbefore becoming the current {@link #cfg!errorMessage}.\n"
    },
    {
      "name": "errorMessage",
      "type": "String",
      "defaultValue": "null",
      "description": "The field's error message to display as {@link #cfg!errorTarget}.\nThis message must already be properly formatted and encoded as appropriate\nfor the `{@link #cfg!errorTarget errorTarget}`.\n"
    },
    {
      "name": "errorTarget",
      "type": "String",
      "defaultValue": "'qtip'",
      "description": "The location where the error message text should display.\n\nThe following are values that have predefined meaning:\n\n- `qtip` Display a {@link Ext.tip.Manager} containing the message\n when the user hovers (or taps) the field. For this option to work, quick tips\n must be enabled by calling {@link Ext.tip.Manager#init}.\n- `side` Add an error icon to the right of the field, displaying the message\n in a popup on hover or tap.\n- `title` Display the message in a default browser `title` attribute.\n- `under` Add a `div` beneath the field containing the error message.\n"
    },
    {
      "name": "errorTip",
      "type": "Object",
      "defaultValue": "null",
      "description": "The default config that will be used to display errors in the tooltip.\n"
    },
    {
      "name": "errorTpl",
      "type": "String/String[]/Ext.XTemplate",
      "defaultValue": "null",
      "description": "The template used to format the {@link #cfg!error} set for this field.\nBy default, the {@link #cfg!errorTarget} is used to determine\nwhether the error(s) are formatted as an HTML list or as plain text.\n"
    },
    {
      "name": "eventHandlers",
      "type": "Object",
      "defaultValue": "{\n    focus: 'handleFocusEvent',\n    blur: 'handleBlurEvent'\n}",
      "description": "A map of event type to the corresponding handler method\nname. This is used internally by native event handling mechanism.\n"
    },
    {
      "name": "exitAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being hidden.\n"
    },
    {
      "name": "flex",
      "type": "Number/String/Object",
      "defaultValue": "null",
      "description": "The flex of this item *if* this item item is inside a {@link Ext.layout.HBox}\nor {@link Ext.layout.VBox} layout.\n\nYou can also update the flex of a component dynamically using\nthe {@link Ext.layout.FlexBox#setItemFlex} method.\n\nWhen supplied as a string or number this option supports the same syntax\nas CSS [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex).\nFor example:\n\n    flex: '1 2 auto'\n\nsets `flex-grow` property to `0`, `flex-shrink` to `2` and `flex-basis` to\n`'auto'`.\n\nThe default `flex-shrink` value for box layout items is set to `0` in the\nstylesheet, which is different from the browser's default `flex-shrink` value\nof `1`.  This accommodates the majority use case for applications since where\nnon-flexed components are typically not expected to shrink smaller than their\ndefault size.\n\nFor convenience when only a single number is supplied it is used as the value\nfor both `flex-grow` and `flex-shrink`, for example `flex: 3` is the same as\n`flex: '3 3'`\n\nAn object form is also accepted:\n\n    flex: {\n        grow: 1,\n        shrink: 2,\n        basis: 'auto'\n    }\n\nWhen the object form is supplied `shrink` always defaults to `0` regardless\nof the value of `grow`.\n\nAlthough `'auto'` is the default value for flex-basis, flex-basis defaults to 0%\nwhen flex is supplied as a single numeric or string value (e.g. `flex: 1`). If\nthis behavior is not desired either explicitly set flex-basis to `'auto'` or use\nthe object form to set only grow and/or shrink:\n\n    flex: {\n        grow: 2\n    }\n"
    },
    {
      "name": "floated",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "A Component may be floated above all other components in the application. This means that\nthe component is absolutely positioned, and will move to the front and occlude other\nsibling floated component if clicked.\n\nA Floated component may have floated descendants. It will bring these decendants to the\nfront with it when brought to the front of its sibling floated components.\n\nBy default, descendant floated components are all positioned using the viewport\ncoordinate system. To make a floating component a positioning parent for descendants,\nand have the ancestors positioned relatively, configure the parent floated component\nwith `{@link #cfg!relative #cfg-relative}: true`.\n"
    },
    {
      "name": "floatedPicker",
      "type": "Object",
      "defaultValue": "null",
      "description": "A configuration object, containing an {@link cfg#xtype} property which specifies\nthe widget to create if `{@link #cfg!picker}: 'floated'` (or if it's '`auto'` and\nthe app is *not* on a phone).\n\nReplaces `defaultTabletPicker`\n"
    },
    {
      "name": "floatedPickerAlign",
      "type": "String",
      "defaultValue": "tl-bl?",
      "description": "*Only valud when the {@link #cfg!floatedPicker} is used.\nThe {@link Ext.Component#method!showBy} alignment string to use when showing the\nfloated picker by the input field.\n"
    },
    {
      "name": "focusCls",
      "type": "String",
      "defaultValue": "'x-focused'",
      "description": "CSS class that will be added to focused\ncomponent's {@link #property!focusClsEl #focusClsEl}, and removed when component blurs.\n"
    },
    {
      "name": "focusTrap",
      "defaultValue": "{\n    tabIndex: -1,\n    cls: 'x-hidden-clip'\n}"
    },
    {
      "name": "fullscreen",
      "type": "Boolean"
    },
    {
      "name": "height",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "hidden",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Whether or not this Component is hidden (its CSS `display` property is set to `none`).\n\nDefaults to `true` for {@link #cfg!floated #floated} Components.\n"
    },
    {
      "name": "hideAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being hidden.  Typically you want to use\nan outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check\nthe {@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
    },
    {
      "name": "hideMode",
      "type": "'clip'/'display'/'offsets'/'opacity'/'visibility'",
      "defaultValue": "'display'",
      "description": "A String which specifies how this component's DOM element will be hidden. The\naccepted values are any of these:\n\n- `'clip'` : Hide using {@link Ext.dom.Element#static-property!CLIP clip}.\n- `'display'` : Hide using {@link Ext.dom.Element#static-property!DISPLAY display}.\n- `'offsets'` : Hide using positioning {@link Ext.dom.Element#static-property!OFFSETS offsets}.\n- `'opacity'` : Hide using {@link Ext.dom.Element#static-property!OPACITY opacity}.\n- `'visibility'` : Hide using {@link Ext.dom.Element#static-property!VISIBILITY visibility}.\n\nHiding using ``display`` results in having no dimensions as well as resetting\nscroll positions to 0.\n\nThe other modes overcome this but may have different trade-offs in certain\ncircumstances.\n"
    },
    {
      "name": "hideOnMaskTap",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "When using a {@link #cfg!modal} Component, setting this to `true` will hide\nthe modal mask and the Container when the mask is tapped on.\n"
    },
    {
      "name": "hideTrigger",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to hide the expand {@link #cfg!triggers trigger}.\n"
    },
    {
      "name": "html",
      "type": "String/Ext.dom.Element/HTMLElement",
      "defaultValue": "null",
      "description": "Optional HTML content to render inside this Component, or a reference to an\nexisting element on the page.\n"
    },
    {
      "name": "id",
      "type": "String",
      "description": "The **unique id of this component instance.**\n\nIt should not be necessary to use this configuration except for singleton objects in\nyour application. Components created with an id may be accessed globally\nusing {@link Ext#method!getCmp Ext.getCmp}.\n\nInstead of using assigned ids, use the {@link #cfg!itemId #itemId} config,\nand {@link Ext.ComponentQuery} which provides selector-based searching\nfor Sencha Components analogous to DOM querying. The {@link Ext.Container} class\ncontains {@link Ext.Container#method!down shortcut methods} to query its descendant Components\nby selector.\n\nNote that this id will also be used as the element id for the containing HTML element\nthat is rendered to the page for this component. This allows you to write id-based CSS\nrules to style the specific instance of this component uniquely, and also to select\nsub-elements using this component's id as the parent.\n\n**Note**: to avoid complications imposed by a unique id also see `{@link #cfg!itemId #itemId}`.\n\nDefaults to an auto-assigned id.\n"
    },
    {
      "name": "inline",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to cause this field to layout with inline element behavior.\nAn inline field's width is determined by the total width of its label and body\nelements instead of automatically expanding to fill the width of its container.\n"
    },
    {
      "name": "inputCls",
      "type": "String"
    },
    {
      "name": "inputMask",
      "type": "String/Ext.field.InputMask",
      "defaultValue": "null",
      "description": "\n**Important:** To use this config you must require `{@link Ext.field.InputMask}` or\nuse a complete framework build. The logic to implement an `{@link #cfg!inputMask inputMask}` is not\nautomatically included in a build.\n"
    },
    {
      "name": "inputType",
      "type": "String",
      "defaultValue": "'text'",
      "description": "The type attribute for input fields -- e.g. text,\npassword, date, url, email, etc.\n"
    },
    {
      "name": "inputValue",
      "defaultValue": "null"
    },
    {
      "name": "instanceCls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "\nAn extra CSS class or classes to augment the {@link #property!classCls #classCls} on an individual instance\n"
    },
    {
      "name": "itemId",
      "type": "String",
      "defaultValue": "undefined",
      "description": "An itemId can be used as an alternative way to get a reference to a component when no\nobject reference is available. Instead of using an `{@link #cfg!id #id}` with {@link Ext#method!getCmp Ext#getCmp},\nuse `{@link #cfg!itemId itemId}` with {@link Ext.Container#method!getComponent Ext.Container#getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s or\n{@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal MixedCollection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container - avoiding potential conflicts with\n{@link Ext.ComponentManager} which requires a **unique** `{@link #cfg!id #id}`.\n\nAlso see {@link #cfg!id #id}, {@link Ext.Container#method!query Ext.Container#query}, {@link Ext.Container#method!down Ext.Container#down} and\n{@link Ext.Container#method!child Ext.Container#child}.\n"
    },
    {
      "name": "keyMap",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n"
    },
    {
      "name": "keyMapEnabled",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n"
    },
    {
      "name": "keyMapTarget",
      "type": "String",
      "defaultValue": "'el'",
      "description": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n"
    },
    {
      "name": "label",
      "type": "String",
      "defaultValue": "null",
      "description": "The label of this field\n"
    },
    {
      "name": "labelAlign",
      "type": "'top'/'left'/'bottom'/'right'",
      "defaultValue": "'left'",
      "description": "When value is `'placeholder'`, the label text will be rendered as placeholder\ntext inside the empty input and will animated to \"top\" alignment when the input\nis focused or contains text.\nThe position to render the label relative to the field body.\n"
    },
    {
      "name": "labelCls",
      "type": "String",
      "defaultValue": "null",
      "description": "Optional CSS class to add to the Label element.\n"
    },
    {
      "name": "labelInPlaceholder",
      "defaultValue": "true"
    },
    {
      "name": "labelMinWidth",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "Min-width of this field's label.\n"
    },
    {
      "name": "labelTextAlign",
      "type": "'top'/'right'/'bottom'/'left'",
      "defaultValue": "'left'",
      "description": "\nText alignment of this field's label\n"
    },
    {
      "name": "labelWidth",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "Width of this field's label. Can be a number of pixels or any valid CSS value,\nsuch as `'30%'`. To size the label to its text, use `labelWidth: 'auto'`\n"
    },
    {
      "name": "labelWrap",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to allow the label to wrap. If set to `false`, the label will be truncated\nwith an ellipsis.\n"
    },
    {
      "name": "left",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute left position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "listeners",
      "type": "Object",
      "description": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n"
    },
    {
      "name": "margin",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The margin to use on this Component. Can be specified as a number (in which\ncase all edges get the same margin) or a CSS string like '5 10 10 10'\n"
    },
    {
      "name": "matchFieldWidth",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "*Only valid when the `{@link #cfg!picker}: 'floated'` is used.\nWhether the {@link #cfg!floatedPicker}'s width should be explicitly set to match\nthe width of the input element.\n"
    },
    {
      "name": "maxDate",
      "type": "Date/String",
      "defaultValue": "null",
      "description": "The maximum allowed date value for this field.\nString value should conform to {@link #cfg!dateFormat}.\n"
    },
    {
      "name": "maxHeight",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The maximum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
    },
    {
      "name": "maxLength",
      "type": "Number",
      "defaultValue": "null",
      "description": "The maximum number of permitted input characters.\n"
    },
    {
      "name": "maxWidth",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The maximum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
    },
    {
      "name": "minDate",
      "type": "Date/String",
      "defaultValue": "null",
      "description": "The minimum allowed date value for this field.\nString value should conform to {@link #cfg!dateFormat}.\n"
    },
    {
      "name": "minHeight",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The minimum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "minWidth",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The minimum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "modal",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "`true` to make this Component modal. This will create a mask underneath the\nComponent that covers its parent and does not allow the user to interact with\nany other Components until this Component is dismissed.\n"
    },
    {
      "name": "modelValidation",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `Ext.field.*`) at present, however, this\nsetting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component (or by an ancestor container), the `validators`\nof for any {@Ext.data.Model record} fields will be used wherever the `value` is\nbound to such data fields.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n"
    },
    {
      "name": "name",
      "type": "String",
      "defaultValue": "null",
      "description": "The field's name.  Used by form panels to gather data to be submitted.\n\nFor {@link Ext.field.Input} this name is set as the `{@link #cfg!name name}` attribute\nof the `inputElement`\n"
    },
    {
      "name": "nameable",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n"
    },
    {
      "name": "padding",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The padding to use on this Component. Can be specified as a number (in which\ncase all edges get the same padding) or a CSS string like '5 10 10 10'\n"
    },
    {
      "name": "parseValidator",
      "type": "Ext.data.validator.Validator",
      "defaultValue": "null"
    },
    {
      "name": "pattern",
      "type": "String",
      "defaultValue": "null",
      "description": "The value for the HTML5 `{@link #cfg!pattern pattern}` attribute. You can use this to change which\nkeyboard layout will be used.\n\n    Ext.define('Ux.field.Pattern', {\n        extend : 'Ext.field.Text',\n        xtype  : 'patternfield',\n\n        config : {\n component : {\n     pattern : '[0-9]*'\n }\n        }\n    });\n\nEven though it extends {@link Ext.field.Text}, it will display the number keyboard.\n"
    },
    {
      "name": "picker",
      "type": "String/Object",
      "defaultValue": "'auto'",
      "description": "\nA string representing the type of picker to use.  Can be one of the following values.\n\n- `'edge'` to use the {@link #cfg!edgePicker #edgePicker}, generally used on small formfactor devices.\n- `'floated'` to use the {@link #cfg!floatedPicker #floatedPicker}, generally used on tablets or desktops.\n- `'auto'` to allow the framework to select the appropriate picker for the device.\n\nCan also be a config object for the picker.\n"
    },
    {
      "name": "pickerSlotAlign",
      "type": "String",
      "defaultValue": "'center'",
      "description": "The alignment of text in the picker created by this Select\n"
    },
    {
      "name": "placeholder",
      "type": "String",
      "defaultValue": "null",
      "description": "A string value displayed in the input when the control is empty.\n"
    },
    {
      "name": "placeHolder",
      "type": "String",
      "description": "A string value displayed in the input when the control is empty.\n"
    },
    {
      "name": "plugins",
      "type": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
      "defaultValue": "null",
      "description": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: 'listpaging'\n     });\n\nIn the above examples, the string \"listpaging\" is the type alias for\n`{@link Ext.dataview.plugin.ListPaging}`. The full alias includes the \"plugin.\" prefix\n(i.e., 'plugin.listpaging').\n\nThe preferred form for multiple plugins or to configure plugins is the\nkeyed-object form (new in version 6.5):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: {\n             pullrefresh: true,\n             listpaging: {\n                 autoPaging: true,\n                 weight: 10\n             }\n         }\n     });\n\nThe object keys are the `id`'s as well as the default type alias. This form\nallows the value of the `{@link #cfg!plugins plugins}` to be merged from base class to derived class\nand finally with the instance configuration. This allows classes to define a\nset of plugins that derived classes or instantiators can further configure or\ndisable. This merge behavior is a feature of the\n{@link Ext.Class#cfg!config}.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases (arrays are not\nmerged so this form does not respect plugins defined by the class author):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\nAn array can also contain elements that are config objects with a `type`\nproperty holding the type alias:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['pullrefresh', {\n             type: 'listpaging',\n             autoPaging: true\n         }]\n     });\n"
    },
    {
      "name": "publishes",
      "type": "String/String[]/Object",
      "defaultValue": "{\n    value: 1\n}",
      "description": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #method!publishState #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n"
    },
    {
      "name": "readOnly",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to set the field DOM element `readonly` attribute to `\"true\"`.\n\nMutation of {@link Ext.field.Text} through triggers is also disabled.\n\nTo simply prevent typing into the field while still allowing mutation through\ntriggers, set {@link Ext.field.Text#cfg!editable} to `false`.\n"
    },
    {
      "name": "record",
      "type": "Ext.data.Model",
      "defaultValue": "null",
      "description": "A model instance which updates the Component's html based on it's tpl. Similar\nto the data configuration, but tied to to a record to make allow dynamic\nupdates.  This must be a model instance and not a configuration of one.\n"
    },
    {
      "name": "reference",
      "type": "String",
      "defaultValue": "null",
      "description": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.Container#cfg!referenceHolder view}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.Container Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n"
    },
    {
      "name": "relative",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure this as `true` if you require descendant floated components to be positioned\nrelative to this component's coordinate space, not the viewport's coordinate space.\n\n*Note:* The coordinate space is this Component's encapsulating element's area. Not that\nof the inner element in which static child items are rendered by the layout.\n"
    },
    {
      "name": "renderTo",
      "type": "Ext.dom.Element",
      "defaultValue": "null",
      "description": "Optional element to render this Component to.\nNot required if this component is an {@link Ext.Container#cfg!items item} of a Container\nof a Container.\n"
    },
    {
      "name": "required",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to make this field required.\n"
    },
    {
      "name": "requiredMessage",
      "type": "String",
      "defaultValue": "'This field is required'",
      "description": "The error message to display when {@link #cfg!required #required} is `true` and the field's\nvalue is \"empty\" (`null`, `undefined`, or empty string).\n"
    },
    {
      "name": "right",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute right position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "ripple",
      "type": "Boolean/Object/String",
      "defaultValue": "null",
      "description": "Set to truthy, Color or Object value for the ripple.\n"
    },
    {
      "name": "scrollable",
      "type": "Boolean/String/Object",
      "defaultValue": "null",
      "description": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `null`) to disable scrolling - this is the default.\n- `{@link #cfg!x x}` or `horizontal` to enable horizontal scrolling only\n- `{@link #cfg!y y}` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n"
    },
    {
      "name": "session",
      "type": "Boolean/Object/Ext.data.Session",
      "defaultValue": "null",
      "description": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n"
    },
    {
      "name": "shadow",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Configure as `true` for the component to have a drop shadow. 'false' will suppress any\ndefault shadow. By default the theme will determine the presence of a shadow.\n"
    },
    {
      "name": "shareableName",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n"
    },
    {
      "name": "shim",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure as `true` for the component to use an `<iframe>` as an underlay to ensure\ncertain non-standard browser plugins are occluded by this component.\n"
    },
    {
      "name": "showAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the\n{@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
    },
    {
      "name": "sideError",
      "type": "String",
      "defaultValue": "null"
    },
    {
      "name": "stateful",
      "type": "Boolean/Object/String[]",
      "defaultValue": "false",
      "description": "\nThis config specifies the config properties that will be persisted using the\n{@link Ext.state.Provider}. If this config is set to `true`, the\nconfigs specified by `{@link #cfg!statefulDefaults statefulDefaults}` will be assumed.\n\n     stateful: true\n\nOtherwise, this config can be an array of strings of the properties to save:\n\n     stateful: [\n         'width',\n         'height',\n         'collapsed'\n     ]\n\nThe above is equivalent to:\n\n     stateful: {\n         width: true,\n         height: true,\n         collapsed: true\n     }\n\n**Note:** To be truly stateful, an `id` or `{@link #cfg!stateId stateId}` must also be assigned.\n\nA stateful object will save its state when any of these config properties change\nvalue.\n"
    },
    {
      "name": "statefulDefaults",
      "type": "Object/String[]",
      "defaultValue": "null",
      "description": "The default set of {@link #cfg!stateful} properties. The form of this config\nis the same as {@link #cfg!stateful} except this config cannot be a Boolean.\n\nThis config is intended for classes to specify so that instances can simply\nenable statefulness using `stateful: true`.\n"
    },
    {
      "name": "stateId",
      "type": "String",
      "defaultValue": "null",
      "description": "The unique id for this object to use for state management purposes.\n"
    },
    {
      "name": "stripCharsRe",
      "type": "RegExp",
      "description": "A JavaScript RegExp object used to strip unwanted content from the value\nduring input. If `{@link #cfg!stripCharsRe stripCharsRe}` is specified,\nevery *character sequence* matching `{@link #cfg!stripCharsRe stripCharsRe}` will be removed.\n"
    },
    {
      "name": "style",
      "type": "String/Object",
      "defaultValue": "null",
      "description": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n"
    },
    {
      "name": "tabIndex",
      "type": "Number",
      "defaultValue": "null",
      "description": "DOM tabIndex attribute for this component's\n{@link #property!focusEl #focusEl}.\n"
    },
    {
      "name": "textAlign",
      "type": "'left'/'center'/'right'",
      "defaultValue": "'left'",
      "description": "The text alignment of this field.\n"
    },
    {
      "name": "tipError",
      "type": "String",
      "defaultValue": "null"
    },
    {
      "name": "titleError",
      "type": "String",
      "defaultValue": "null"
    },
    {
      "name": "toFrontOnShow",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "True to automatically call {@link #method!toFront #toFront} when a {@link #cfg!floated #cfg-floated} Component is\nshown.\n"
    },
    {
      "name": "tooltip",
      "type": "String/Object",
      "defaultValue": "null",
      "description": "The tooltip for this component - can be a string to be used as innerHTML\n(html tags are accepted) or {@link Ext.tip.ToolTip} config object.\n\nThe default behavior is to use a shared tip instance. The tooltip configuration is\nregistered with the {@link Ext.tip.Manager}. To enable this, your application can set\nthe {@link Ext.app.Application#cfg!quickTips Ext.app.Application#quickTips} config, or an instance of the\n{@link Ext.tip.Manager} may be created manually.\n\nTo force a unique tooltip instance to be created, specify `autoCreate: true` on this\nconfiguration.\n\nConfiguring this with `autoHide: false` implies `autoCreate: true` so that the desired\npersistent behavior can be obtained with other targets still showing the singleton\ninstance.\n"
    },
    {
      "name": "top",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute top position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "touchAction",
      "type": "Object",
      "defaultValue": "null",
      "description": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on reference elements using the reference element\nname, for example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Widget', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n"
    },
    {
      "name": "tpl",
      "type": "String/String[]/Ext.Template/Ext.XTemplate[]",
      "defaultValue": "null",
      "description": "A {@link String}, {@link Ext.Template}, {@link Ext.XTemplate} or an {@link Array} of\nstrings to form an {@link Ext.XTemplate}. Used in conjunction with the {@link #cfg!data #data}\nand {@link #cfg!tplWriteMode #tplWriteMode} configurations.\n\n__Note__\nThe {@link #cfg!data #data} configuration _must_ be set for any content to be shown in the\ncomponent when using this configuration.\n"
    },
    {
      "name": "tplWriteMode",
      "type": "String",
      "defaultValue": "'overwrite'",
      "description": "The Ext.(X)Template method to use when updating the content area of the\nComponent.\n\nValid modes are:\n\n- append\n- insertAfter\n- insertBefore\n- insertFirst\n- overwrite\n"
    },
    {
      "name": "translatable",
      "type": "Object",
      "defaultValue": "null"
    },
    {
      "name": "triggers",
      "type": "Object",
      "defaultValue": "{\n    clear: {\n        type: 'clear'\n    }\n}",
      "description": "{@link Ext.field.trigger.Trigger} to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare {@link Ext.field.trigger.Trigger} configuration objects.\n\n    Ext.create('Ext.field.Text', {\n        label: 'My Custom Field',\n        triggers: {\n foo: {\n     cls: 'my-foo-trigger',\n     handler: function() {\n         console.log('foo trigger clicked');\n     }\n },\n bar: {\n     cls: 'my-bar-trigger',\n     handler: function() {\n         console.log('bar trigger clicked');\n     }\n }\n        }\n    });\n\nThe weight value may be a negative value in order to position custom triggers\nahead of default triggers like that of a DatePicker field.\n\n    Ext.create('Ext.form.DatePicker', {\n        label: 'Pick a Date',\n        triggers: {\n foo: {\n     cls: 'my-foo-trigger',\n     weight: -2, // negative to place before default triggers\n     handler: function() {\n         console.log('foo trigger clicked');\n     }\n },\n bar: {\n     cls: 'my-bar-trigger',\n     weight: -1,\n     handler: function() {\n         console.log('bar trigger clicked');\n     }\n }\n        }\n    });\n"
    },
    {
      "name": "twoWayBindable",
      "type": "String/String[]/Object",
      "defaultValue": "{\n    value: 1\n}",
      "description": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `{@link #cfg!value value}` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n"
    },
    {
      "name": "ui",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "The ui or uis to be used on this Component\n\nWhen a ui is configured, CSS class names are added to the {@link #property!element #element}, created\nby appending the ui name(s) to each {@link #property!classCls #classCls} and/or {@link #property!baseCls #baseCls}.\n"
    },
    {
      "name": "underError",
      "type": "String",
      "defaultValue": "null"
    },
    {
      "name": "userCls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n"
    },
    {
      "name": "userSelectable",
      "type": "Boolean/String/Object",
      "defaultValue": "false",
      "description": "\nSetting the value to true implies `auto`, while false implies `none`. Setting the value\nto `text` allows users to select text within this component. The value may also be an\nobject keyed by child element name as seen below.\n\nCan also be any valid value for the CSS3\n[user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select) property.\n\n\nBy default, the user cannot click+drag+select text/elements of the UI.  Applications may\nwant to enable user selection for specific DOM elements, such as the bodyElement of\na component used as a tab panel.  The tab and tab text would not be user selectable in\nthis example, but the content area when the tab is selected would.\n\n     userSelectable: {\n         element: true,       // allow the element to be user selectable\n         bodyElement: true    // allow the component's body element to be user selectable\n     }\n"
    },
    {
      "name": "validateDisabled",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to validate the field, even if it is disabled.\n"
    },
    {
      "name": "validationMessage",
      "type": "String",
      "defaultValue": "'Is in the wrong format'",
      "description": "For validation, regex, etc., this is the error message returned if field is invalid.\n"
    },
    {
      "name": "validators",
      "type": "Mixed",
      "defaultValue": "null",
      "description": "A validator or array of validators to be applied to the field.\n\nWhen the field is validated, each validator is applied and if any one of them\ndetermines the field  is invalid, the field will be marked as invalid.  If you\nexamine the field's validators, you will get an array of Ext.data.Validators.\n\nValidation currently is synchronous.  If you need to validate a field with interaction\nwith a server, you would do this when the form is submitted.\n\nA validator may be:\n\n* A regexp - if the field fails to match the regexp, it is invalid.\n* A function - the function will be called to validate the field; it should return\nfalse if invalid.\n\n* An object - an object with a member fn that is a function to be called to validate\nthe field.\n\n* An instantiated Validator {@link Ext.data.validator.Validator}\n"
    },
    {
      "name": "value",
      "type": "Object/Date",
      "description": "Default value for the field and the internal {@link Ext.picker.Date} component.\nAccepts an object of 'year', 'month' and 'day' values, all of which should be\nnumbers, or a {@link Date}.\n\nExample: {year: 1989, day: 1, month: 5} = 1st May 1989 or new Date()\n"
    },
    {
      "name": "viewModel",
      "type": "String/Object/Ext.app.ViewModel",
      "defaultValue": "null",
      "description": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n"
    },
    {
      "name": "weight",
      "type": "Number",
      "defaultValue": "0",
      "description": "This value controls this item's order in a {@link Ext.Container#cfg!weighted}\n{@link Ext.Container} (see {@link #cfg!parent}).\n\nLower values gravitate towards the start of the container - the top in vertical layouts,\nthe locale start side in horizontal layouts.\n"
    },
    {
      "name": "width",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "x",
      "type": "Number",
      "defaultValue": "0",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
    },
    {
      "name": "xtype",
      "type": "String",
      "description": "The `{@link #cfg!xtype xtype}` configuration option can be used to optimize Component creation and rendering.\nIt serves as a shortcut to the full component name. For example, the component\n`Ext.button.Button` has an xtype of `button`.\n\nYou can define your own xtype on a custom {@link Ext.Component} like so:\n\n    Ext.define('PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nAny Component can be created implicitly as an object config with an xtype specified,\nallowing it to be declared and passed into the rendering pipeline without actually being\ninstantiated as an object. Not only is rendering deferred, but the actual creation of the\nobject itself is also deferred, saving memory and resources until they are actually needed.\nIn complex, nested layouts containing many Components, this can make a noticeable\nimprovement in performance.\n\n    // Explicit creation of contained Components:\n    var panel = new Ext.Panel({\n       // ...\n       items: [\n          Ext.create('Ext.button.Button', {\n             text: 'OK'\n          })\n       ]\n    });\n\n    // Implicit creation using xtype:\n    var panel = new Ext.Panel({\n       // ...\n       items: [{\n          xtype: 'button',\n          text: 'OK'\n       }]\n    });\n\nIn the first example, the button will always be created immediately during the panel's\ninitialization. With many added Components, this approach could potentially slow the\nrendering of the page. In the second example, the button will not be created or rendered\nuntil the panel is actually displayed in the browser. If the panel is never displayed\n(for example, if it is a tab that remains hidden) then the button will never be created and\nwill never consume any resources whatsoever.\n"
    },
    {
      "name": "y",
      "type": "Number",
      "defaultValue": "0",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
    },
    {
      "name": "zIndex",
      "type": "Number",
      "defaultValue": "null",
      "description": "The z-index to give this Component when it is rendered.\n\nNot valid for {@link #cfg!floated #cfg-floated} Components. The Z ordering of {@link #cfg!floated #cfg-floated}\nComponents is managed by ordering of the DOM elements.\n"
    }
  ],
  "methods": [
    {
      "name": "_addDeclaredListeners",
      "params": [
        {
          "name": "listeners",
          "type": "Array"
        }
      ]
    },
    {
      "name": "_fixReference"
    },
    {
      "name": "_flushStateful"
    },
    {
      "name": "_getStateId",
      "params": []
    },
    {
      "name": "activatePlugin",
      "params": [
        {
          "name": "type",
          "type": "String",
          "description": "The `type` of the plugin.\n"
        }
      ]
    },
    {
      "name": "addAfterListener"
    },
    {
      "name": "addBeforeListener"
    },
    {
      "name": "addCls",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]",
          "description": "The CSS class(es) to add.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "Optional prefix to add to each class.\n"
        },
        {
          "name": "suffix",
          "type": "String",
          "description": "Optional suffix to add to each class.\n"
        }
      ]
    },
    {
      "name": "addDelegatedListener",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "options"
        },
        {
          "name": "order"
        },
        {
          "name": "caller"
        },
        {
          "name": "manager"
        }
      ]
    },
    {
      "name": "addDeprecations",
      "params": [
        {
          "name": "deprecations"
        }
      ]
    },
    {
      "name": "addElementReference",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the reference\n"
        },
        {
          "name": "domNode",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "addElementReferenceOnDemand",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the reference\n"
        },
        {
          "name": "domNode",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "addListener",
      "params": [
        {
          "name": "eventName",
          "type": "String/Object",
          "description": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n"
        },
        {
          "name": "order",
          "type": "String",
          "description": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n"
        },
        {
          "name": "caller",
          "description": "\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n"
        }
      ]
    },
    {
      "name": "addManagedListener",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item to which to add\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe {@link Ext.util.Observable#method!addListener addListener} options.\n"
        },
        {
          "name": "noDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "addPlugin",
      "params": [
        {
          "name": "plugin",
          "type": "Object/String/Ext.plugin.Abstract",
          "description": "The plugin or config object or\nalias to add.\n"
        }
      ]
    },
    {
      "name": "addTrigger",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "Unique name (within this field) for the trigger.  Cannot be the\nsame as the name of an existing trigger for this field.\n"
        },
        {
          "name": "trigger",
          "type": "Ext.field.trigger.Trigger/Object",
          "description": "The trigger instance or a config\nobject for a trigger to add\n"
        }
      ]
    },
    {
      "name": "adjustChildDirtyCount",
      "params": [
        {
          "name": "dirty",
          "type": "Boolean",
          "description": "The dirty state of the descendant component.\n"
        }
      ]
    },
    {
      "name": "afterEdit"
    },
    {
      "name": "afterErase"
    },
    {
      "name": "afterRender"
    },
    {
      "name": "alignTo",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "applyBind",
      "params": [
        {
          "name": "binds",
          "type": "String/Object"
        },
        {
          "name": "currentBindings",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyCentered",
      "params": [
        {
          "name": "centered",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "applyPlugins",
      "params": [
        {
          "name": "plugins",
          "type": "String[]/Object[]/Ext.plugin.Abstract[]",
          "description": "The new plugins to use.\n"
        },
        {
          "name": "oldPlugins",
          "type": "Ext.plugin.Abstract[]",
          "description": "The existing plugins in use.\n"
        }
      ]
    },
    {
      "name": "applySession",
      "params": [
        {
          "name": "session",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyStyle",
      "params": [
        {
          "name": "style"
        },
        {
          "name": "oldStyle"
        }
      ]
    },
    {
      "name": "applyTpl",
      "params": [
        {
          "name": "tpl"
        }
      ]
    },
    {
      "name": "applyValidators",
      "params": [
        {
          "name": "validators"
        }
      ]
    },
    {
      "name": "applyViewModel",
      "params": [
        {
          "name": "viewModel",
          "type": "String/Object/Ext.app.ViewModel"
        }
      ]
    },
    {
      "name": "beforeInitialize"
    },
    {
      "name": "beginSyncChildDirty"
    },
    {
      "name": "blur"
    },
    {
      "name": "bubble",
      "params": [
        {
          "name": "fn",
          "type": "Function",
          "description": "The function to call\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope of the function. Defaults to current node.\n"
        },
        {
          "name": "args",
          "type": "Array",
          "description": "The args to call the function with. Defaults to passing the current\ncomponent.\n"
        }
      ]
    },
    {
      "name": "callOverridden",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments",
          "description": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callOverridden(arguments)`\n"
        }
      ]
    },
    {
      "name": "callParent",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments",
          "description": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n"
        }
      ]
    },
    {
      "name": "callSuper",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments",
          "description": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n"
        }
      ]
    },
    {
      "name": "center",
      "params": []
    },
    {
      "name": "clearDelegatedListeners"
    },
    {
      "name": "clearInvalid"
    },
    {
      "name": "clearListeners"
    },
    {
      "name": "clearManagedListeners"
    },
    {
      "name": "clearValue"
    },
    {
      "name": "collapseIf",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "completeEdit"
    },
    {
      "name": "constructor",
      "params": [
        {
          "name": "config",
          "type": "Object",
          "description": "The standard configuration object.\n"
        }
      ]
    },
    {
      "name": "createPlugin",
      "params": [
        {
          "name": "config",
          "type": "String/Object/Ext.plugin.Abstract",
          "description": "The plugin type, config\nobject or instance.\n"
        }
      ]
    },
    {
      "name": "createRelayer",
      "params": [
        {
          "name": "newName",
          "type": "String",
          "description": "The name under which to re-fire the passed parameters.\n"
        },
        {
          "name": "beginEnd",
          "type": "Array",
          "description": "The caller can specify on which indices to slice.\n"
        }
      ]
    },
    {
      "name": "createTrigger",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "trigger"
        }
      ]
    },
    {
      "name": "destroy"
    },
    {
      "name": "destroyMembers",
      "params": [
        {
          "name": "args",
          "type": "String...",
          "description": "One or more names of the properties to destroy and remove from\nthe object.\n"
        }
      ]
    },
    {
      "name": "destroyPlugin",
      "params": [
        {
          "name": "plugin",
          "type": "String/Ext.plugin.Abstract",
          "description": "The plugin or its `{@link #cfg!id id}` to remove.\n"
        }
      ]
    },
    {
      "name": "didValueChange",
      "params": [
        {
          "name": "newVal"
        },
        {
          "name": "oldVal"
        }
      ]
    },
    {
      "name": "disable"
    },
    {
      "name": "doAddListener",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "options"
        },
        {
          "name": "order"
        },
        {
          "name": "caller"
        },
        {
          "name": "manager"
        }
      ]
    },
    {
      "name": "doClearIconTap"
    },
    {
      "name": "doDestroy"
    },
    {
      "name": "doFireDelegatedEvent",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "args"
        }
      ]
    },
    {
      "name": "doFireEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Array"
        },
        {
          "name": "bubbles",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "doInheritUi"
    },
    {
      "name": "doKeyUp",
      "params": [
        {
          "name": "me"
        },
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "doUninheritUi"
    },
    {
      "name": "doValidate",
      "params": [
        {
          "name": "value",
          "type": "Mixed",
          "description": "The (parsed) value\n"
        },
        {
          "name": "errors",
          "type": "String[]",
          "description": "The array of validation errors\n"
        },
        {
          "name": "skipLazy",
          "type": "Boolean",
          "description": "`false` (the default) to run all validators.\n"
        }
      ]
    },
    {
      "name": "enable"
    },
    {
      "name": "enableBubble",
      "params": [
        {
          "name": "eventNames",
          "type": "String/String[]",
          "description": "The event name to bubble, or an Array of event names.\n"
        }
      ]
    },
    {
      "name": "findFloatParent",
      "params": [
        {
          "name": "needsShow"
        }
      ]
    },
    {
      "name": "findFocusTarget",
      "params": []
    },
    {
      "name": "findPlugin",
      "params": [
        {
          "name": "type",
          "type": "String",
          "description": "The Plugin's `type` as specified by the class's\n{@link Ext.Class#cfg!alias alias} configuration.\n"
        }
      ]
    },
    {
      "name": "finishSyncChildDirty"
    },
    {
      "name": "fireAction",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Array",
          "description": "Arguments to pass to handlers and to the action function.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The action function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener addListener}`\n"
        },
        {
          "name": "order",
          "type": "String",
          "description": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener addListener}` for more details.\n"
        }
      ]
    },
    {
      "name": "fireDirtyChange"
    },
    {
      "name": "fireEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Object...",
          "description": "Variable number of parameters are passed to handlers.\n"
        }
      ]
    },
    {
      "name": "fireEventArgs",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Object[]",
          "description": "An array of parameters which are passed to handlers.\n"
        }
      ]
    },
    {
      "name": "fireEventedAction",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Array",
          "description": "Arguments to pass to handlers and to the action function.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The action function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "fnArgs",
          "type": "Array/Boolean",
          "description": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n"
        }
      ]
    },
    {
      "name": "fireKey",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "fixDirtyState"
    },
    {
      "name": "focus",
      "params": [
        {
          "name": "selectText",
          "type": "Boolean/Number[]",
          "description": "If applicable, `true` to also select all the text\nin this component, or an array consisting of start and end (defaults to start)\nposition of selection.\n"
        }
      ]
    },
    {
      "name": "formatErrors",
      "params": [
        {
          "name": "errors",
          "type": "String[]"
        }
      ]
    },
    {
      "name": "getAlignmentInfo",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        }
      ]
    },
    {
      "name": "getAlignRegion",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "getAriaLabelEl",
      "params": [
        {
          "name": "reference",
          "type": "Function/String/String[]",
          "description": "Component reference,\nor array of component references, or a function that should return\nthe proper attribute string. The function will be called in the\ncontext of the labelled component.\n"
        }
      ]
    },
    {
      "name": "getBubbleParent",
      "params": []
    },
    {
      "name": "getClassCls"
    },
    {
      "name": "getConfig",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the config property to get.\n"
        },
        {
          "name": "peek",
          "type": "Boolean",
          "description": "`true` to peek at the raw value without calling the getter.\n"
        },
        {
          "name": "ifInitialized",
          "type": "Boolean",
          "description": "`true` to only return the initialized property\nvalue, not the raw config value, and *not* to trigger initialization. Returns\n`undefined` if the property has not yet been initialized.\n"
        }
      ]
    },
    {
      "name": "getController",
      "params": []
    },
    {
      "name": "getCurrentAlignmentInfo"
    },
    {
      "name": "getCurrentConfig"
    },
    {
      "name": "getElementConfig",
      "params": []
    },
    {
      "name": "getFloatParent",
      "params": []
    },
    {
      "name": "getFloatWrap",
      "params": []
    },
    {
      "name": "getFocusClsEl",
      "params": [
        {
          "name": "focusEl",
          "type": "Ext.dom.Element",
          "description": "Return focus styling element for the given\nfocused element. This is used by Components implementing multiple focusable\nelements.\n"
        }
      ]
    },
    {
      "name": "getFocusEl",
      "params": []
    },
    {
      "name": "getFormattedValue",
      "params": [
        {
          "name": "format",
          "type": "String",
          "description": "The format to be returned.\n"
        }
      ]
    },
    {
      "name": "getId",
      "params": []
    },
    {
      "name": "getInherited",
      "params": [
        {
          "name": "inner",
          "type": "Boolean",
          "description": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n"
        }
      ]
    },
    {
      "name": "getInheritedConfig",
      "params": [
        {
          "name": "property",
          "type": "String",
          "description": "The name of the config property to return.\n"
        },
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n"
        }
      ]
    },
    {
      "name": "getInitialConfig",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "Name of the config option to return.\n"
        }
      ]
    },
    {
      "name": "getModalSibling"
    },
    {
      "name": "getPlugin",
      "params": [
        {
          "name": "id",
          "type": "String",
          "description": "The `{@link #cfg!id id}` of the plugin.\n"
        }
      ]
    },
    {
      "name": "getRawValue",
      "params": []
    },
    {
      "name": "getRefOwner"
    },
    {
      "name": "getRenderTarget",
      "params": []
    },
    {
      "name": "getScrollableClientRegion",
      "params": []
    },
    {
      "name": "getSize",
      "params": []
    },
    {
      "name": "getStateBuilder",
      "params": [
        {
          "name": "cache",
          "type": "Boolean",
          "description": "Pass `true` to return a cached builder.\n"
        }
      ]
    },
    {
      "name": "getStatefulOwner",
      "params": []
    },
    {
      "name": "getTabIndex",
      "params": []
    },
    {
      "name": "getTextSelection",
      "params": []
    },
    {
      "name": "getXTypes",
      "params": []
    },
    {
      "name": "handleBlurEvent",
      "params": [
        {
          "name": "info"
        }
      ]
    },
    {
      "name": "handleFocusEvent",
      "params": [
        {
          "name": "info"
        }
      ]
    },
    {
      "name": "hasCls",
      "params": [
        {
          "name": "className",
          "type": "String",
          "description": "The CSS class to check for.\n"
        }
      ]
    },
    {
      "name": "hasConfig",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "hasListener",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to check for\n"
        }
      ]
    },
    {
      "name": "hide",
      "params": [
        {
          "name": "animation",
          "type": "Object/Boolean",
          "description": "You can specify an animation here or a bool to use the\n{@link #cfg!hideAnimation #hideAnimation} config.\n"
        }
      ]
    },
    {
      "name": "initBindable"
    },
    {
      "name": "initConfig",
      "params": [
        {
          "name": "instanceConfig",
          "type": "Object"
        }
      ]
    },
    {
      "name": "initDragConstraints",
      "params": [
        {
          "name": "draggable",
          "type": "Ext.drag.Source"
        }
      ]
    },
    {
      "name": "initElement"
    },
    {
      "name": "initElementListeners",
      "params": [
        {
          "name": "elementConfig"
        }
      ]
    },
    {
      "name": "initFocusableElement",
      "params": [
        {
          "name": "force"
        }
      ]
    },
    {
      "name": "initFocusableEvents",
      "params": [
        {
          "name": "force"
        }
      ]
    },
    {
      "name": "initialize"
    },
    {
      "name": "initInheritedState",
      "params": [
        {
          "name": "inheritedState"
        }
      ]
    },
    {
      "name": "initKeyMap"
    },
    {
      "name": "initUiReference",
      "params": [
        {
          "name": "referenceName",
          "type": "String"
        },
        {
          "name": "uiCls",
          "type": "String"
        },
        {
          "name": "isInstance",
          "type": "Boolean",
          "description": "pass `false` if this is not an instance-level\nreference\n"
        }
      ]
    },
    {
      "name": "insertFloatedDom",
      "params": [
        {
          "name": "needsShow"
        }
      ]
    },
    {
      "name": "invalidateInheritedState"
    },
    {
      "name": "is",
      "params": [
        {
          "name": "selector",
          "type": "String",
          "description": "The selector string to test against.\n"
        }
      ]
    },
    {
      "name": "isAncestor",
      "params": [
        {
          "name": "possibleDescendant",
          "type": "Ext.Component",
          "description": "The Component to test for presence\nwithin this Component's subtree.\n"
        }
      ]
    },
    {
      "name": "isBlurring",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "isBound",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The property name to test. Defaults to the\n{@link #property!defaultBindProperty #defaultBindProperty}\n"
        }
      ]
    },
    {
      "name": "isCentered",
      "params": []
    },
    {
      "name": "isDescendantOf",
      "params": [
        {
          "name": "ancestor",
          "type": "Ext.Component",
          "description": "A Component which may contain this Component.\n"
        }
      ]
    },
    {
      "name": "isDestructing",
      "params": []
    },
    {
      "name": "isDirty",
      "params": []
    },
    {
      "name": "isDisabled",
      "params": []
    },
    {
      "name": "isEnabled",
      "params": []
    },
    {
      "name": "isEqual",
      "params": [
        {
          "name": "value1",
          "type": "Object",
          "description": "The first value to compare\n"
        },
        {
          "name": "value2",
          "type": "Object",
          "description": "The second value to compare\n"
        }
      ]
    },
    {
      "name": "isFocusable",
      "params": [
        {
          "name": "deep",
          "type": "Boolean",
          "description": "Optionally determine if the container itself\nis focusable, or if container's focus is delegated to a child component\nand that child is focusable.\n"
        }
      ]
    },
    {
      "name": "isFocusing",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "isHeighted"
    },
    {
      "name": "isHidden",
      "params": [
        {
          "name": "deep",
          "type": "Boolean/Ext.Widget",
          "description": "`true` to check if this component\nis hidden because a parent container is hidden. Alternatively, a reference to the\ntop-most parent at which to stop climbing.\n"
        }
      ]
    },
    {
      "name": "isPainted"
    },
    {
      "name": "isRendered"
    },
    {
      "name": "isSuspended",
      "params": [
        {
          "name": "event",
          "type": "String",
          "description": "The name of the specific event to check\n"
        }
      ]
    },
    {
      "name": "isSyncing",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the property being bound to.\n"
        }
      ]
    },
    {
      "name": "isValid"
    },
    {
      "name": "isVisible",
      "params": [
        {
          "name": "deep",
          "type": "Boolean",
          "description": "`true` to check if this component\nis visible and all parents are also visible.\n\nContrast this with the {@link #method!isHidden #isHidden} method which just checks the\nhidden state of the component.\n"
        }
      ]
    },
    {
      "name": "isWidthed"
    },
    {
      "name": "isXType",
      "params": [
        {
          "name": "xtype",
          "type": "String",
          "description": "The xtype to check for this Component.\n"
        },
        {
          "name": "shallow",
          "type": "Boolean",
          "description": "`false` to check whether this Component is descended\nfrom the xtype (this is the default), or `true` to check whether this Component is directly\nof the specified xtype.\n"
        }
      ]
    },
    {
      "name": "link",
      "params": [
        {
          "name": "name",
          "type": "String"
        },
        {
          "name": "value",
          "type": "Object"
        }
      ]
    },
    {
      "name": "loadState",
      "params": [
        {
          "name": "state",
          "type": "Ext.state.Builder"
        },
        {
          "name": "stateful",
          "type": "Object",
          "description": "The stateful properties as an object keyed by config name.\n"
        }
      ]
    },
    {
      "name": "lookupController",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "`true` to not consider the controller directly attached\nto this view (if it exists).\n"
        }
      ]
    },
    {
      "name": "lookupNameHolder",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "`false` to return this as the name holder if\nthis instance has set `nameHolder`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!name name}` property set by the\nowner of a component that is also a `nameHolder` itself. In this case, the\n`{@link #cfg!name name}` connects not to this component but to the parent nameHolder.\n"
        }
      ]
    },
    {
      "name": "lookupReferenceHolder",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "`false` to return this as the reference holder if\nthis instance has set `referenceHolder`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!reference reference}` property set by the\nowner of a component that is also a `referenceHolder` itself. In this case, the\n`{@link #cfg!reference reference}` connects not to this component but to the parent referenceHolder.\n"
        }
      ]
    },
    {
      "name": "lookupSession",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n"
        }
      ]
    },
    {
      "name": "lookupTpl",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the property that holds the template.\n"
        }
      ]
    },
    {
      "name": "lookupViewModel",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n"
        }
      ]
    },
    {
      "name": "markInvalid",
      "params": [
        {
          "name": "messages"
        }
      ]
    },
    {
      "name": "mon",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item to which to add\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`scope`.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe {@link Ext.util.Observable#method!addListener addListener} options.\n"
        },
        {
          "name": "noDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "mun",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item from which to remove\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "If the `ename` parameter was an event name, this is\nthe handler function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        }
      ]
    },
    {
      "name": "on",
      "params": [
        {
          "name": "eventName",
          "type": "String/Object",
          "description": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes or the *name* of\nthe method within the specified `scope`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n"
        },
        {
          "name": "order",
          "type": "String",
          "description": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n"
        },
        {
          "name": "caller",
          "description": "\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n"
        }
      ]
    },
    {
      "name": "onAdded",
      "params": [
        {
          "name": "parent"
        },
        {
          "name": "instanced"
        }
      ]
    },
    {
      "name": "onAfter",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event to listen for.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n"
        }
      ]
    },
    {
      "name": "onBefore",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event to listen for.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n"
        }
      ]
    },
    {
      "name": "onBlur",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onEsc",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onFocus",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onFocusEnter",
      "params": [
        {
          "name": "e",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onFocusLeave",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "onFocusMove",
      "params": [
        {
          "name": "info",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onInheritedAdd",
      "params": [
        {
          "name": "parent"
        },
        {
          "name": "instanced",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onInheritedRemove",
      "params": [
        {
          "name": "destroying",
          "type": "Boolean",
          "description": "`true` if this item will be destroyed by it's container\n"
        }
      ]
    },
    {
      "name": "onInitialized",
      "params": [
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "args"
        }
      ]
    },
    {
      "name": "onPickerChange",
      "params": [
        {
          "name": "picker",
          "type": "Ext.picker.Date",
          "description": "The date picker.\n"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "The new value from the date picker.\n"
        }
      ]
    },
    {
      "name": "onPlaceholderAutoFill",
      "params": [
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The current event object\n"
        }
      ]
    },
    {
      "name": "onRender"
    },
    {
      "name": "onResize",
      "params": [
        {
          "name": "width",
          "type": "Number",
          "description": "The new width.\n"
        },
        {
          "name": "height",
          "type": "Number",
          "description": "The new height.\n"
        },
        {
          "name": "oldWidth",
          "type": "Number",
          "description": "The previous width.\n"
        },
        {
          "name": "oldHeight",
          "type": "Number",
          "description": "The previous height.\n"
        }
      ]
    },
    {
      "name": "onScrollEnd",
      "params": [
        {
          "name": "x",
          "type": "Number",
          "description": "The current x position\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The current y position\n"
        }
      ]
    },
    {
      "name": "onScrollMove",
      "params": [
        {
          "name": "x",
          "type": "Number",
          "description": "The current x position\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The current y position\n"
        }
      ]
    },
    {
      "name": "onScrollStart",
      "params": [
        {
          "name": "x",
          "type": "Number",
          "description": "The current x position\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The current y position\n"
        }
      ]
    },
    {
      "name": "onStatefulChange"
    },
    {
      "name": "owns",
      "params": [
        {
          "name": "element"
        }
      ]
    },
    {
      "name": "parseValue",
      "params": [
        {
          "name": "value",
          "type": "String",
          "description": "The value to parse (never `null`).\n"
        },
        {
          "name": "errors",
          "type": "String[]",
          "description": "The set of validation errors. If the value cannot be\nparsed, the error message should be added to this array.\n"
        }
      ]
    },
    {
      "name": "persistState"
    },
    {
      "name": "preprocessShow",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "processElementConfig",
      "params": []
    },
    {
      "name": "processRawValue",
      "params": [
        {
          "name": "value",
          "type": "String",
          "description": "The unprocessed string value\n"
        }
      ]
    },
    {
      "name": "publishState",
      "params": [
        {
          "name": "property",
          "type": "String",
          "description": "The name of the property to update.\n"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "The value of `property`. Only needed if `property` is given.\n"
        }
      ]
    },
    {
      "name": "rawToValue",
      "params": [
        {
          "name": "rawValue",
          "type": "Object"
        }
      ]
    },
    {
      "name": "readStateObject",
      "params": []
    },
    {
      "name": "realign",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "realignFloatedPicker",
      "params": [
        {
          "name": "picker"
        }
      ]
    },
    {
      "name": "relayEvents",
      "params": [
        {
          "name": "origin",
          "type": "Object",
          "description": "The Observable whose events this object is to relay.\n"
        },
        {
          "name": "events",
          "type": "String[]/Object",
          "description": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event\nas a pop event.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and\n'storeclear'.\n"
        }
      ]
    },
    {
      "name": "removeAfterListener"
    },
    {
      "name": "removeBeforeListener"
    },
    {
      "name": "removeCls",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]",
          "description": "The class(es) to remove.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "Optional prefix to prepend before each class.\n"
        },
        {
          "name": "suffix",
          "type": "String",
          "description": "Optional suffix to append to each class.\n"
        }
      ]
    },
    {
      "name": "removeDelegatedListener",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        }
      ]
    },
    {
      "name": "removeListener",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The type of event the handler was associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener addListener} call.**\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n"
        },
        {
          "name": "eventOptions",
          "description": "\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n"
        }
      ]
    },
    {
      "name": "removeManagedListener",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item from which to remove\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "If the `ename` parameter was an event name, this is\nthe handler function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        }
      ]
    },
    {
      "name": "removeManagedListenerItem",
      "params": [
        {
          "name": "isClear",
          "type": "Boolean",
          "description": "True if this is being called during a clear\n"
        },
        {
          "name": "managedListener",
          "type": "Object",
          "description": "The managed listener item\n"
        },
        {
          "name": "item",
          "type": "Object"
        },
        {
          "name": "ename",
          "type": "String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "See removeManagedListener for other args\n"
        }
      ]
    },
    {
      "name": "removePlugin",
      "params": [
        {
          "name": "plugin",
          "type": "String/Ext.plugin.Abstract",
          "description": "The plugin or its `{@link #cfg!id id}` to remove.\n"
        },
        {
          "name": "destroy",
          "type": "Boolean",
          "description": "Pass `true` to not call `destroy()` on the plugin.\n"
        }
      ]
    },
    {
      "name": "removeTrigger",
      "params": [
        {
          "name": "trigger",
          "type": "String/Ext.field.trigger.Trigger",
          "description": "The name of the trigger to remove,\nor a trigger reference.\n"
        },
        {
          "name": "destroy",
          "type": "Boolean",
          "description": "False to prevent the trigger from being destroyed\non removal.  Only use this option if you want to reuse the trigger instance.\n"
        }
      ]
    },
    {
      "name": "replaceCls",
      "params": [
        {
          "name": "oldCls",
          "type": "String/String[]",
          "description": "The class(es) to remove.\n"
        },
        {
          "name": "newCls",
          "type": "String/String[]",
          "description": "The class(es) to add.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "Optional prefix to prepend before each class.\n"
        },
        {
          "name": "suffix",
          "type": "String",
          "description": "Optional suffix to append to each class.\n"
        }
      ]
    },
    {
      "name": "reset",
      "params": []
    },
    {
      "name": "resetFloating"
    },
    {
      "name": "resetOriginalValue"
    },
    {
      "name": "resetPositioned"
    },
    {
      "name": "resolveListenerScope",
      "params": [
        {
          "name": "defaultScope",
          "type": "Object",
          "description": "The default scope to return if none is found.\n"
        }
      ]
    },
    {
      "name": "resolveSatelliteListenerScope",
      "params": [
        {
          "name": "satellite",
          "type": "Ext.mixin.Observable"
        },
        {
          "name": "defaultScope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "resumeEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String...",
          "description": "Multiple event names to resume.\n"
        }
      ]
    },
    {
      "name": "resumeEvents",
      "params": [
        {
          "name": "discardQueue",
          "type": "Boolean",
          "description": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n"
        }
      ]
    },
    {
      "name": "revertFocus"
    },
    {
      "name": "revertFocusTo",
      "params": [
        {
          "name": "target"
        }
      ]
    },
    {
      "name": "saveState",
      "params": [
        {
          "name": "state",
          "type": "Ext.state.Builder",
          "description": "The state builder to which to save state.\n"
        },
        {
          "name": "stateful",
          "type": "Object",
          "description": "The stateful properties as an object keyed by config name.\n"
        }
      ]
    },
    {
      "name": "select",
      "params": [
        {
          "name": "start",
          "type": "Number"
        },
        {
          "name": "end",
          "type": "Number"
        },
        {
          "name": "direction",
          "type": "\"f\"/\"b\"/\"forward\"/\"backward\"",
          "description": "Pass \"f\" for forward,\n\"b\" for backwards.\n"
        }
      ]
    },
    {
      "name": "serialize",
      "params": []
    },
    {
      "name": "setConfig",
      "params": [
        {
          "name": "name",
          "type": "String/Object",
          "description": "The name of the property to set, or a set of key value\npairs to set.\n"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "The value to set for the name parameter.\n"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setCurrentAlignmentInfo",
      "params": [
        {
          "name": "alignmentInfo"
        }
      ]
    },
    {
      "name": "setInputAttribute",
      "params": [
        {
          "name": "attribute"
        },
        {
          "name": "newValue"
        }
      ]
    },
    {
      "name": "setListeners",
      "params": [
        {
          "name": "listeners",
          "type": "Object",
          "description": "The listeners\n"
        }
      ]
    },
    {
      "name": "setPickerLocation",
      "params": [
        {
          "name": "fromKeyboard",
          "type": "Boolean",
          "description": "Passed as `true` if the keyboard was used\nto open the picker. This usually means that picker location should be set.\n\nA function which may be implemented in subclasses which moves the focus\nto the value in the {@link #cfg!picker} which matches this field's value.\n\nFor example, if you were writing a time picker, this method would be where\nyou synced the picker's value with the field's value.\n"
        }
      ]
    },
    {
      "name": "setRendered",
      "params": [
        {
          "name": "rendered",
          "type": "Boolean"
        },
        {
          "name": "root",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setSize",
      "params": [
        {
          "name": "width",
          "type": "Number",
          "description": "The new width for the Component.\n"
        },
        {
          "name": "height",
          "type": "Number",
          "description": "The new height for the Component.\n"
        }
      ]
    },
    {
      "name": "setTabIndex",
      "params": [
        {
          "name": "newTabIndex",
          "type": "Number",
          "description": "new tabIndex to set\n"
        },
        {
          "name": "focusEl",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "setVisibility",
      "params": [
        {
          "name": "isVisible"
        }
      ]
    },
    {
      "name": "setXY",
      "params": [
        {
          "name": "x"
        },
        {
          "name": "y"
        },
        {
          "name": "animation"
        }
      ]
    },
    {
      "name": "show",
      "params": [
        {
          "name": "animation",
          "type": "Object/Boolean",
          "description": "You can specify an animation here or a bool to\n                         use the {@link #cfg!showAnimation #showAnimation} config.\n"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "showAt",
      "params": [
        {
          "name": "x",
          "type": "Number/Number[]/Object",
          "description": "The new x position or array of `[x,y]`, or an\nobject `{x:10, y:10}`.\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The new y position.\n"
        }
      ]
    },
    {
      "name": "showBy",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component",
          "description": "The target component to show this component by.\n"
        },
        {
          "name": "alignment",
          "type": "String",
          "description": "The alignment string, eg: `'tl-bl'`.\n"
        },
        {
          "name": "options",
          "type": "Object/Array",
          "description": "An object containing options for the\n{@link Ext.util.Region#method!alignTo Ext.util.Region#alignTo} method, if an Array is used, it will be assumed to be the\noffset.\n"
        }
      ]
    },
    {
      "name": "statics",
      "params": []
    },
    {
      "name": "suspendEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String...",
          "description": "Multiple event names to suspend.\n"
        }
      ]
    },
    {
      "name": "suspendEvents",
      "params": [
        {
          "name": "queueSuspended",
          "type": "Boolean",
          "description": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n"
        }
      ]
    },
    {
      "name": "syncAlwaysOnTop",
      "params": [
        {
          "name": "fromMousedown"
        }
      ]
    },
    {
      "name": "syncFloatWrap"
    },
    {
      "name": "syncTriggers"
    },
    {
      "name": "toFront",
      "params": [
        {
          "name": "fromMousedown",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "toggleCls",
      "params": [
        {
          "name": "className",
          "type": "String",
          "description": "The CSS class to toggle.\n"
        },
        {
          "name": "state",
          "type": "Boolean",
          "description": "If specified as `true`, causes the class to be added. If\nspecified as `false`, causes the class to be removed.\n"
        }
      ]
    },
    {
      "name": "toggleInvalidCls",
      "params": [
        {
          "name": "hasError",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "transformRawValue",
      "params": [
        {
          "name": "value",
          "type": "Object",
          "description": "The value\n"
        }
      ]
    },
    {
      "name": "transformStatefulConfig",
      "params": [
        {
          "name": "instanceConfig",
          "type": "Object",
          "description": "The base config object\n"
        },
        {
          "name": "configurator",
          "type": "Ext.Configurator"
        }
      ]
    },
    {
      "name": "triggerInitialized"
    },
    {
      "name": "un",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The type of event the handler was associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener addListener} call.**\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n"
        },
        {
          "name": "eventOptions",
          "description": "\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n"
        }
      ]
    },
    {
      "name": "unAfter",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event the handler\nwas associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The handler to remove.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Extra options object.\n"
        }
      ]
    },
    {
      "name": "unBefore",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event the handler\nwas associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The handler to remove.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Extra options object.\n"
        }
      ]
    },
    {
      "name": "unlink",
      "params": [
        {
          "name": "names",
          "type": "String[]",
          "description": "The names of the linked objects to destroy.\n"
        }
      ]
    },
    {
      "name": "up",
      "params": [
        {
          "name": "selector",
          "type": "String",
          "description": "The simple selector to test.\n"
        },
        {
          "name": "limit",
          "type": "String/Number/Ext.Component",
          "description": "This may be a selector upon which to stop\nthe upward scan, or a limit of the number of steps, or Component reference to stop on.\n"
        }
      ]
    },
    {
      "name": "updateCls",
      "params": [
        {
          "name": "newCls"
        },
        {
          "name": "oldCls"
        }
      ]
    },
    {
      "name": "updateData",
      "params": [
        {
          "name": "newData"
        }
      ]
    },
    {
      "name": "updateDateFormat"
    },
    {
      "name": "updateHeight",
      "params": [
        {
          "name": "height"
        }
      ]
    },
    {
      "name": "updateSession",
      "params": [
        {
          "name": "session",
          "type": "Ext.data.Session"
        }
      ]
    },
    {
      "name": "updateViewModel",
      "params": [
        {
          "name": "viewModel",
          "type": "Ext.app.ViewModel"
        },
        {
          "name": "oldViewModel",
          "type": "Ext.app.ViewModel"
        }
      ]
    },
    {
      "name": "updateWidth",
      "params": [
        {
          "name": "width"
        }
      ]
    },
    {
      "name": "validate",
      "params": [
        {
          "name": "skipLazy",
          "type": "Boolean",
          "description": "Pass `true` to skip validators marked as `lazy`.\n"
        }
      ]
    },
    {
      "name": "watchConfig",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        }
      ]
    },
    {
      "name": "whenVisible",
      "params": [
        {
          "name": "fn",
          "type": "String",
          "description": "The function to execute on this component.\n"
        },
        {
          "name": "args",
          "type": "Object[]",
          "description": "The arguments to pass.\n"
        }
      ]
    }
  ],
  "events": [
    {
      "name": "action",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Mixed",
          "description": "The key event object\n"
        }
      ]
    },
    {
      "name": "added",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "container",
          "type": "Ext.Container",
          "description": "Parent Container\n"
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the item within the Container.\n"
        }
      ]
    },
    {
      "name": "beforebottomchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!bottom bottom}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!bottom bottom}`."
        }
      ]
    },
    {
      "name": "beforecenteredchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!centered centered}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!centered centered}`."
        }
      ]
    },
    {
      "name": "beforedisabledchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!disabled disabled}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!disabled disabled}`."
        }
      ]
    },
    {
      "name": "beforedockedchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "String",
          "description": "The current value of `{@link #cfg!docked docked}`."
        },
        {
          "name": "oldValue",
          "type": "String",
          "description": "The previous value of `{@link #cfg!docked docked}`."
        }
      ]
    },
    {
      "name": "beforeheightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!height height}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!height height}`."
        }
      ]
    },
    {
      "name": "beforehiddenchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!hidden hidden}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!hidden hidden}`."
        }
      ]
    },
    {
      "name": "beforehide",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "beforeleftchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!left left}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!left left}`."
        }
      ]
    },
    {
      "name": "beforemaxHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxHeight maxHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxHeight maxHeight}`."
        }
      ]
    },
    {
      "name": "beforemaxWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxWidth maxWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxWidth maxWidth}`."
        }
      ]
    },
    {
      "name": "beforeminHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minHeight minHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minHeight minHeight}`."
        }
      ]
    },
    {
      "name": "beforeminWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minWidth minWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minWidth minWidth}`."
        }
      ]
    },
    {
      "name": "beforeorientationchange"
    },
    {
      "name": "beforerightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!right right}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!right right}`."
        }
      ]
    },
    {
      "name": "beforescrollablechange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean/String/Object",
          "description": "The current value of `{@link #cfg!scrollable scrollable}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean/String/Object",
          "description": "The previous value of `{@link #cfg!scrollable scrollable}`."
        }
      ]
    },
    {
      "name": "beforeshow",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "beforetofront",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component",
          "description": "The component instance\n"
        }
      ]
    },
    {
      "name": "beforetopchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!top top}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!top top}`."
        }
      ]
    },
    {
      "name": "beforewidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!width width}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!width width}`."
        }
      ]
    },
    {
      "name": "blur",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "bottomchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!bottom bottom}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!bottom bottom}`."
        }
      ]
    },
    {
      "name": "centeredchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!centered centered}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!centered centered}`."
        }
      ]
    },
    {
      "name": "change",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Date"
        },
        {
          "name": "newDate",
          "type": "Date",
          "description": "The new date\n"
        },
        {
          "name": "oldDate",
          "type": "Date",
          "description": "The old date\n"
        }
      ]
    },
    {
      "name": "clearicontap",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "input",
          "type": "Ext.field.Input",
          "description": "The field's input component.\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "click",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event",
          "description": "The event object.\n"
        }
      ]
    },
    {
      "name": "collapse",
      "params": [
        {
          "name": "field",
          "type": "Ext.form.field.Picker",
          "description": "This field instance\n"
        }
      ]
    },
    {
      "name": "destroy"
    },
    {
      "name": "dirtychange",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "dirty",
          "type": "Boolean",
          "description": "True if the component is now dirty.\n"
        }
      ]
    },
    {
      "name": "disabledchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!disabled disabled}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!disabled disabled}`."
        }
      ]
    },
    {
      "name": "dockedchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "String",
          "description": "The current value of `{@link #cfg!docked docked}`."
        },
        {
          "name": "oldValue",
          "type": "String",
          "description": "The previous value of `{@link #cfg!docked docked}`."
        }
      ]
    },
    {
      "name": "erased",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "errorchange",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Field"
        },
        {
          "name": "error",
          "type": "String",
          "description": "The current error message\n"
        }
      ]
    },
    {
      "name": "expand",
      "params": [
        {
          "name": "field",
          "type": "Ext.form.field.Picker",
          "description": "This field instance\n"
        }
      ]
    },
    {
      "name": "floatingchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "positioned",
          "type": "Boolean",
          "description": "The component's new positioned state. This becomes\n`true` is a component is positioned using the {@link #cfg!top #cfg-top}, {@link #cfg!right #cfg-right},\n{@link #cfg!bottom #cfg-bottom} or {@link #cfg!left #cfg-left} configs.\n"
        }
      ]
    },
    {
      "name": "focus",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "focusenter",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The focusenter event.\n"
        }
      ]
    },
    {
      "name": "focusleave",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The focusleave event.\n"
        }
      ]
    },
    {
      "name": "fullscreen",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "heightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!height height}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!height height}`."
        }
      ]
    },
    {
      "name": "hiddenchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!hidden hidden}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!hidden hidden}`."
        }
      ]
    },
    {
      "name": "hide",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "initialize",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "keydown",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "keyup",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "leftchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!left left}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!left left}`."
        }
      ]
    },
    {
      "name": "maxHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxHeight maxHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxHeight maxHeight}`."
        }
      ]
    },
    {
      "name": "maxWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxWidth maxWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxWidth maxWidth}`."
        }
      ]
    },
    {
      "name": "minHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minHeight minHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minHeight minHeight}`."
        }
      ]
    },
    {
      "name": "minWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minWidth minWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minWidth minWidth}`."
        }
      ]
    },
    {
      "name": "mousedown",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "moved",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "container",
          "type": "Ext.Container",
          "description": "Container which holds the component\n"
        },
        {
          "name": "toIndex",
          "type": "Number",
          "description": "The new index of the item.\n"
        },
        {
          "name": "fromIndex",
          "type": "Number",
          "description": "The old index of the item.\n"
        }
      ]
    },
    {
      "name": "orientationchange"
    },
    {
      "name": "painted",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "element",
          "type": "Ext.dom.Element",
          "description": "The component's outer element (this.element)\n"
        }
      ]
    },
    {
      "name": "paste",
      "params": [
        {
          "name": "this",
          "type": "Ext.field.Text",
          "description": "This field\n"
        },
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "positionedchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "positioned",
          "type": "Boolean",
          "description": "The component's new positioned state. This becomes\n`true` is a component is positioned using the {@link #cfg!top #cfg-top}, {@link #cfg!right #cfg-right},\n{@link #cfg!bottom #cfg-bottom} or {@link #cfg!left #cfg-left} configs.\n"
        }
      ]
    },
    {
      "name": "removed",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "container",
          "type": "Ext.Container",
          "description": "Container which holds the component\n"
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the item that was removed.\n"
        }
      ]
    },
    {
      "name": "resize",
      "params": [
        {
          "name": "element",
          "type": "Ext.dom.Element",
          "description": "The component's outer element (this.element).\n"
        },
        {
          "name": "info",
          "type": "Object",
          "description": "The component's new size parameters.\n"
        }
      ]
    },
    {
      "name": "rightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!right right}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!right right}`."
        }
      ]
    },
    {
      "name": "scrollablechange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean/String/Object",
          "description": "The current value of `{@link #cfg!scrollable scrollable}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean/String/Object",
          "description": "The previous value of `{@link #cfg!scrollable scrollable}`."
        }
      ]
    },
    {
      "name": "show",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "tofront",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component",
          "description": "The component instance\n"
        }
      ]
    },
    {
      "name": "topchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!top top}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!top top}`."
        }
      ]
    },
    {
      "name": "updatedata",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "newData",
          "type": "Object",
          "description": "The new data\n"
        }
      ]
    },
    {
      "name": "widthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!width width}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!width width}`."
        }
      ]
    }
  ]
}