{
  "xtype": "gridcolumn",
  "name": "Ext.grid.column.Column",
  "extends": "Ext.grid.HeaderContainer,Object",
  "extended": "Ext.grid.HeaderContainer,Ext.Container,Ext.Component,Ext.Widget,Ext.Evented,Ext.Base",
  "primaryCollection": "na",
  "primaryCollectionBaseType": "na",
  "numConfigs": 159,
  "numMethods": 283,
  "numEvents": 62,
  "configs": [
    {
      "name": "activeChildTabIndex",
      "type": "Number",
      "defaultValue": "0",
      "description": "DOM tabIndex attribute to set on the\nactive Focusable child of this container when using the \"Roaming tabindex\"\ntechnique.\n"
    },
    {
      "name": "activeItem",
      "type": "Ext.Component/Object/String/Number",
      "defaultValue": "0",
      "description": "The item from the {@link #cfg!items #cfg-items}\ncollection that will be active first. This is usually only meaningful in a\n{@link Ext.layout.Card}, where only one item can be active at a time. If\npassed a string, it will be assumed to be a {@link Ext.ComponentQuery} selector. A number\nwill reference an index or a {@link Ext.Component} instance may be passed as\nwell. An object config will be created as a new component.\n"
    },
    {
      "name": "align",
      "type": "String",
      "defaultValue": "'left'",
      "description": "Sets the alignment of the header and rendered columns.\nPossible values are: `'left'`, `'center'`, and `'right'`.\n"
    },
    {
      "name": "alignSelf",
      "type": "String",
      "defaultValue": "null",
      "description": "Specifies the self alignment of this widget in a box layout\n"
    },
    {
      "name": "allowFocusingDisabledChildren",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set this to `true`\nto enable focusing disabled child items via keyboard.\n"
    },
    {
      "name": "alwaysOnTop",
      "type": "Boolean/Number",
      "defaultValue": "false",
      "description": "A flag indicating that this component should\nbe above its floated siblings.\n\nThis may be a positive number to prioritize the ordering of multiple visible always on\ntop components.\n\nThis may be set to a *negative* number to prioritize a component to the *bottom* of the\nz-index stack.\n"
    },
    {
      "name": "ariaAttributes",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as `aria-live`, `aria-flowto`, etc.\n\n**Note** that this config is only meaningful at the Component rendering time,\nand setting it after that will do nothing.\n"
    },
    {
      "name": "ariaDescribedBy",
      "type": "String",
      "description": "DOM selector for a child element that is to be used\nas description for this Component, set in `aria-describedby` attribute.\nThe selector works the same way as {@link #cfg!ariaLabelledBy #ariaLabelledBy}.\n"
    },
    {
      "name": "ariaLabel",
      "type": "String",
      "description": "ARIA label for this Component. It is best to use\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} option instead, because screen readers prefer\n`aria-labelledby` attribute to `aria-label`. {@link #cfg!ariaLabel #ariaLabel} and\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} config options are mutually exclusive.\n"
    },
    {
      "name": "ariaLabelledBy",
      "type": "String",
      "description": "DOM selector for a child element that is to be used\nas label for this Component, set in `aria-labelledby` attribute.\nIf the selector is by `{@link #cfg!id #id}`, the label element can be any existing element,\nnot necessarily a child of the main Component element.\n\n{@link #cfg!ariaLabelledBy #ariaLabelledBy} and {@link #cfg!ariaLabel #ariaLabel} config options are\nmutually exclusive, and `{@link #cfg!ariaLabelledBy ariaLabelledBy}` has the higher precedence.\n"
    },
    {
      "name": "autoDestroy",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "If `true`, child items will be destroyed as soon as they are\n{@link #method!remove removed} from this container.\n"
    },
    {
      "name": "autoSize",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "May be set to `false` for improved layout performance if auto-sizing is not required.\n\nSome versions of Safari, both desktop and mobile, have very slow performance\nif the application has deeply nested containers due to the following WebKit\nbug: https://bugs.webkit.org/show_bug.cgi?id=150445\n\nApplications that experience performance issues in the affected versions of\nSafari may need to turn off autoSizing globally for all `{@link Ext.Container}` instances\nby placing the following override in the application's \"overrides\" directory:\n\n    Ext.define('MyApp.overrides.Container', {\n        override: 'Ext.Container',\n        config: {\n            autoSize: false\n        }\n    });\n\nOnce auto-sizing support has turned off by default, it can be selectively\nturned back on only on those container instances that explicitly need auto-sizing\nbehavior by setting `{@link #cfg!autoSize autoSize}` to `true`.\n\nThis option can also be used to allow items to be sized in percentage\nunits as a workaround for the following browser bug:\nhttps://bugs.webkit.org/show_bug.cgi?id=137730\n\nTo illustrate, the following example should render a 200px by 200px green box\n(the container) with a yellow box inside of it (the child item).  The child\nitem's height and width are both set to `'50%'` so the child should render\nexactly 100px by 100px in size.\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        renderTo: Ext.getBody(),\n        height: 200,\n        width: 200,\n        style: 'background: green',\n        items: [{\n            xtype: 'component',\n            style: 'background: yellow',\n            height: '50%',\n            width: '50%'\n        }]\n    });\n\nAll browsers except for Safari render the previous example correctly, but\nSafari does not assign a height to the component.  To make percentage-sized\nitems work in Safari, simply set `{@link #cfg!autoSize autoSize}` to `false` on the container.\n\nSince the underlying implementation works by absolutely positioning the container's\nbody element, this option can only be used when the container is not\n\"shrink wrapping\" the content in either direction.  When `{@link #cfg!autoSize autoSize}` is\nset to `false`, shrink wrapped dimension(s) will collapse to 0.\n"
    },
    {
      "name": "axisLock",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "If `true`, then, when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo} fallback on\nconstraint violation only takes place along the major align axis.\n\nThat is, if alignment `\"l-r\"` is being used, and `axisLock: true` is used,\nthen if constraints fail, only fallback to `\"r-l\"` is considered.\n"
    },
    {
      "name": "bind",
      "type": "Object/String",
      "defaultValue": "null",
      "description": "Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the `title` config:\n\n     var panel = Ext.create({\n         xtype: 'panel',\n         bind: {\n             title: 'Hello {user.name}'\n         }\n     });\n\nTo dynamically add bindings:\n\n     panel.setBind({\n         title: 'Greetings {user.name}!'\n     });\n\nTo remove bindings:\n\n     panel.setBind({\n         title: null\n     });\n\nThe bind expressions are presented to `{@link Ext.app.ViewModel#method!bind Ext.app.ViewModel#bind}`. The\n`ViewModel` instance is determined by `{@link #method!lookupViewModel lookupViewModel}`.\n\n**Note:** If  bind is passed as a string, it will use the\n{@link Ext.Component#property!defaultBindProperty Ext.Component#property-defaultBindProperty} for the binding.\n"
    },
    {
      "name": "bodyCls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "The CSS class to add to this container's body element.\n"
    },
    {
      "name": "border",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Enables or disables bordering on this component.\nThe following values are accepted:\n\n- `null` or `true (default): Do nothing and allow the border to be specified\nby the theme.\n- `false`: suppress the default border provided by the theme.\n\nPlease note that enabling bordering via this config will not add a `border-color`\nor `border-style` CSS property to the component; you provide the `border-color`\nand `border-style` via CSS rule or {@link #cfg!style #style} configuration\n(if not already provide by the theme).\n\n## Using {@link #cfg!style #style}:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        style: 'border: 1px solid blue;'\n        // ...\n    });\n\n## Using CSS:\n\n    Ext.Viewport.add({\n        centered: true,\n        width: 100,\n        height: 100,\n\n        cls: 'my-component'\n        // ...\n    });\n\nAnd your CSS file:\n\n    .my-component {\n        border: 1px solid red;\n    }\n"
    },
    {
      "name": "bottom",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute bottom position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "cardSwitchAnimation",
      "type": "String/Object/Boolean",
      "description": "Animation to be used during transitions of cards.\n"
    },
    {
      "name": "cell",
      "type": "Object",
      "defaultValue": "{\n    xtype: 'gridcell'\n}",
      "description": "The config object used to create {@link Ext.grid.cell.Base} for this column.\nBy default, cells use the {@link Ext.grid.cell.Cell} `{@link #cfg!xtype xtype}`. To create\na different type of cell, simply provide this config and the desired `{@link #cfg!xtype xtype}`.\n"
    },
    {
      "name": "centered",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Configure this as `true` to have this Component centered within its Container.\nSetting this value to `true` will make this Component become 'positioned', which means\nit will no longer participate in the layout of the Container that it resides in.\n"
    },
    {
      "name": "cls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "The CSS class to add to this widget's element, in\naddition to the {@link #property!baseCls #baseCls}. In many cases, this property will be specified\nby the derived widget class. See {@link #cfg!userCls #userCls} for adding additional CSS\nclasses to widget instances (such as items in a {@link Ext.Container}).\n"
    },
    {
      "name": "columns",
      "type": "Ext.grid.column.Column[]",
      "defaultValue": "null",
      "description": "The sub columns within this column/header container.\n"
    },
    {
      "name": "computedWidth",
      "type": "Number",
      "defaultValue": "null",
      "description": "The computed width for this column, may come from either\n{@link #cfg!width #width} or {@link #cfg!flex #flex}.\n"
    },
    {
      "name": "constrainAlign",
      "type": "String/Ext.util.Region/Ext.dom.Element",
      "defaultValue": "null",
      "description": "A specification of the constraint to apply when {@link #method!showBy #showBy} or {@link #method!alignTo #alignTo}\nis called to align a {@link #cfg!floated #floated} or positioned component.\n\nDefaults to the parent container for *positioned* components (components\nwhich have their {@link #cfg!top}, {@link #cfg!right}, {@link #cfg!bottom} or\n{@link #cfg!left} set to move them out of their container's layout flow).\n\nDefaults to the viewport for {@link #cfg!floated #floated} components.\n\nMay be a {@link Ext.ComponentQuery} selector to find an ancestor\ncomponent to constrain within.\n\nMay be `false` to specify that constraining is not applied.\n\nYou may also specify an element, or a {@link Ext.util.Region}\n"
    },
    {
      "name": "contentEl",
      "type": "Ext.dom.Element/HTMLElement/String",
      "defaultValue": "null",
      "description": "The configured element will automatically be added as the content of this\ncomponent. When you pass a string, we expect it to be an element id. If the\ncontent element is hidden, we will automatically show it.\n"
    },
    {
      "name": "control",
      "type": "Object",
      "defaultValue": "null",
      "description": "Enables you to easily control Components inside this Container by\nlistening to their events and taking some action. For example, if we had a container with\na nested Disable button, and we wanted to hide the Container when the Disable button is\ntapped, we could do this:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        control: {\n           'button[text=Disable]': {\n               tap: 'hideMe'\n           }\n        },\n\n        hideMe: function() {\n            this.hide();\n        }\n    });\n\nWe used a {@link Ext.ComponentQuery} selector to listen to the {@link Ext.Button#event!tap tap}\nevent on any {@link Ext.Button} anywhere inside the Container that has the\n{@link Ext.Button#cfg!text text} 'Disable'. Whenever a Component matching that selector\nfires the `tap` event our `hideMe` function is called. `hideMe` is called with scope:\n`this` (e.g. `this` is the Container instance).\n"
    },
    {
      "name": "controller",
      "type": "String/Object/Ext.app.ViewController",
      "defaultValue": "null",
      "description": "A string alias, a configuration object or an instance of a `ViewController` for\nthis container. Sample usage:\n\n    Ext.define('MyApp.UserController', {\n        alias: 'controller.user'\n    });\n\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: 'user'\n    });\n    // Or\n    Ext.define('UserContainer', {\n        extend: 'Ext.container.container',\n        controller: {\n            type: 'user',\n            someConfig: true\n        }\n    });\n\n    // Can also instance at runtime\n    var ctrl = new MyApp.UserController();\n    var view = new UserContainer({\n        controller: ctrl\n    });\n"
    },
    {
      "name": "data",
      "type": "Object",
      "defaultValue": "null",
      "description": "The initial set of data to apply to the `{@link #cfg!tpl #tpl}` to\nupdate the content area of the Component.\n\n**Note:** Data will be appended to any existing data.\n"
    },
    {
      "name": "dataIndex",
      "type": "String",
      "defaultValue": "null",
      "description": "The name of the field in the grid's {@link Ext.data.Store}'s {@link Ext.data.Model}\ndefinition from which to draw the column's value.\n"
    },
    {
      "name": "defaultColumnUI",
      "defaultValue": "null",
      "description": "A default {@link #cfg!ui ui} to use for {@link Ext.grid.column.Column} in\nthis header.\n"
    },
    {
      "name": "defaultEditor",
      "type": "Object/Ext.field.Field",
      "defaultValue": "{}",
      "description": "An optional config object used to create a default editor for values in this\ncolumn when no {@link #cfg!editor #editor} is specified. This config is typically defined\nby derived column classes such as {@link Ext.grid.column.Date} to\ntune the default editor.\n\nThis value is augmented by the {@link #cfg!editorDefaults}\nconfig.\n"
    },
    {
      "name": "defaultFocus",
      "type": "String",
      "defaultValue": "null",
      "description": "\nSpecifies a child Component to receive focus when this Container's {@link #method!focus #method-focus}\nmethod is called. Should be a valid {@link Ext.ComponentQuery} selector.\n"
    },
    {
      "name": "defaultListenerScope",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If `true`, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\n{@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for some sample\nusages.\n\n**NOTE**: This value can only be reliably set at construction time. Setting it\nafter that time may not correctly rewire all of the potentially effected\nlisteners.\n"
    },
    {
      "name": "defaults",
      "type": "Object",
      "defaultValue": "null",
      "description": "A set of default configurations to apply to all child Components\nin this Container. It's often useful to specify defaults when creating more than one\nitems with similar configurations. For example here we can specify that each child is a\npanel and avoid repeating the xtype declaration for each one:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        defaults: {\n            xtype: 'panel'\n        },\n        items: [\n            {\n                html: 'Panel 1'\n            },\n            {\n                html: 'Panel 2'\n            }\n        ]\n    });\n"
    },
    {
      "name": "defaultToolWeights",
      "type": "Object",
      "defaultValue": "{\n    toggle: 10,\n    gear: 20,\n    prev: 30,\n    next: 40,\n    left: 50,\n    right: 60,\n    down: 70,\n    up: 80,\n    refresh: 90,\n    disclosure: 100,\n    // was originally defined in ListItem\n    plus: 100,\n    minus: 110,\n    search: 120,\n    edit: 125,\n    save: 130,\n    print: 140,\n    expand: 150,\n    collapse: 160,\n    help: 170,\n    pin: 180,\n    unpin: 190,\n    minimize: 200,\n    maximize: 210,\n    restore: 220,\n    close: 230,\n    trash: 240\n}",
      "description": "The default `weight` for tools in the `header`.\n"
    },
    {
      "name": "defaultType",
      "type": "String",
      "defaultValue": "container",
      "description": "The default {@link Ext.Component} of child Components to create in this Container\nwhen a child item is specified as a raw configuration object, rather than as an\ninstantiated Component.\n"
    },
    {
      "name": "defaultWidth",
      "type": "Number",
      "defaultValue": "100",
      "description": "A width to apply if the {@link #cfg!flex #flex} or {@link #cfg!width #width} configurations have not\nbeen specified.\n"
    },
    {
      "name": "depends",
      "type": "String[]",
      "defaultValue": "null",
      "description": "Set this config to the field names that effect this column's rendering. This is\nimportant for best performance when using a `{@link #cfg!renderer renderer}`, a `{@link #cfg!summaryRenderer summaryRenderer}` or\na `{@link #cfg!tpl tpl}` to render the cell's content. This is because such mechanisms can use\nany field and as such must be refreshed on *any* field change. When this config\nis provided, only changes to these fields (or the `{@link #cfg!dataIndex dataIndex}`) will cause a\nrefresh.\n\nWhen not using these mechanisms, only changes to the `{@link #cfg!dataIndex dataIndex}` will cause the\ncell content to be refreshed.\n"
    },
    {
      "name": "disabled",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Whether or not this component is disabled\n"
    },
    {
      "name": "displayed",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Set to `true` to call `show` and `false` to call `hide`. Unlike the `{@link #cfg!hidden hidden}`\nconfig, changing this config will potentially involve animations to show or\nhide the component.\n"
    },
    {
      "name": "docked",
      "type": "String",
      "defaultValue": "null",
      "description": "The dock position of this component in its container. Can be `{@link #cfg!left left}`, `{@link #cfg!top top}`, `{@link #cfg!right right}` or\n`{@link #cfg!bottom bottom}`.\n\n__Notes__\n\nYou must use a HTML5 doctype for {@link #cfg!docked #docked} `{@link #cfg!bottom bottom}` to work. To do this, simply\nadd the following code to the HTML file:\n\n    <!doctype html>\n\nSo your index.html file should look a little like this:\n\n    <!doctype html>\n    <html>\n        <head>\n            <title>MY application title</title>\n            ...\n"
    },
    {
      "name": "draggable",
      "type": "Boolean/Object/Ext.drag.Source",
      "defaultValue": "null",
      "description": "Set to `true` to allow this component to be dragged. This can also be the config\nobject for the `{@link Ext.drag.Source}` that will manage the drag.\n"
    },
    {
      "name": "editable",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Set this to true to make this column editable.\nOnly applicable if the grid is using an {@link Ext.grid.plugin.Editable} plugin.\n"
    },
    {
      "name": "editor",
      "type": "Object/String",
      "defaultValue": "null",
      "description": "The `{@link #cfg!xtype xtype}` or config object for a {@link Ext.field.Field} to use for\nediting. This config is used by the {@link Ext.grid.plugin.Editable}\nplugin.\n\nIf this config is not set, and {@link #cfg!editable #editable} is set to true, the\n{@link #cfg!defaultEditor #defaultEditor} is used.\n"
    },
    {
      "name": "editorDefaults",
      "type": "Object",
      "defaultValue": "{\n    \"default\": {\n        xtype: 'textfield',\n        autoComplete: false,\n        textAlign: undefined\n    },\n    'bool,boolean': {\n        xtype: 'checkboxfield',\n        bodyAign: undefined\n    },\n    date: {\n        xtype: 'datefield',\n        textAlign: undefined\n    },\n    'float,number': {\n        xtype: 'numberfield',\n        textAlign: undefined\n    },\n    'int,integer': {\n        xtype: 'numberfield',\n        decimals: 0,\n        textAlign: undefined\n    }\n}",
      "description": "This object holds default config objects for creating the column's `{@link #cfg!editor editor}`.\nThe keys of this object are {@link Ext.data.field.Field#cfg!type field type}\nvalues (such as `'date'` or `'int'`). These keys can also be a comma-separated\nlist of such type names.\n\nThese defaults are applied when producing an `{@link #cfg!editor editor}` based on the field of\n{@link #cfg!store store's} {@link Ext.data.Store#cfg!model} identified\nby the {@link #cfg!dataIndex}.\n\nSee {@link #method!ensureEditor ensureEditor}.\n"
    },
    {
      "name": "enterAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'.\n"
    },
    {
      "name": "eventHandlers",
      "type": "Object",
      "defaultValue": "{\n    focus: 'handleFocusEvent',\n    blur: 'handleBlurEvent'\n}",
      "description": "A map of event type to the corresponding handler method\nname. This is used internally by native event handling mechanism.\n"
    },
    {
      "name": "exitAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being hidden.\n"
    },
    {
      "name": "exportRenderer",
      "type": "Boolean/Function/String",
      "defaultValue": "false",
      "description": "\nDuring data export via the {@link Ext.grid.plugin.Exporter} plugin the data for\nthis column could be formatted in multiple ways:\n\n- using the `exportStyle.format`\n- using the `{@link #cfg!formatter formatter}` if no `{@link #cfg!exportStyle exportStyle}` is defined\n- using the `{@link #cfg!exportRenderer exportRenderer}`\n\nIf you want to use the `{@link #cfg!renderer renderer}` defined on this column then set `{@link #cfg!exportRenderer exportRenderer}`\nto `true`. Beware that this should only happen if the `{@link #cfg!renderer renderer}` deals only with\ndata on the record or value and it does NOT style the cell or returns an html\nstring.\n\n     {\n         xtype: 'numbercolumn',\n         dataIndex: 'price',\n         text: 'Price',\n         renderer: function(value, record, dataIndex, cell, column) {\n             return Ext.util.Format.currency(value);\n         },\n         exportRenderer: true\n     }\n\nIf you don't want to use the `{@link #cfg!renderer renderer}` during export but you still want to format\nthe value in a special way then you can provide a function to `{@link #cfg!exportRenderer exportRenderer}` or\na string (which is a function name on the ViewController).\nThe provided function has the same signature as the renderer.\n\n     {\n         xtype: 'numbercolumn',\n         dataIndex: 'price',\n         text: 'Price',\n         exportRenderer: function(value, record, dataIndex, cell, column) {\n             return Ext.util.Format.currency(value);\n         }\n     }\n\n\n     {\n         xtype: 'numbercolumn',\n         dataIndex: 'price',\n         text: 'Price',\n         exportRenderer: 'exportAsCurrency' // this is a function on the ViewController\n     }\n\n\nIf `exportStyle.format`, `{@link #cfg!formatter formatter}` and `{@link #cfg!exportRenderer exportRenderer}` are all defined on the\ncolumn then the `{@link #cfg!exportStyle exportStyle}` wins and will be used to format the data for this\ncolumn.\n"
    },
    {
      "name": "exportStyle",
      "type": "Ext.exporter.file.Style/Ext.exporter.file.Style[]",
      "defaultValue": "null",
      "description": "\nA style definition that is used during data export via the\n{@link Ext.grid.plugin.Exporter}. This style will be applied to\nthe columns generated in the exported file.\n\nYou could define it as a single object that will be used by all exporters:\n\n     {\n         xtype: 'numbercolumn',\n         dataIndex: 'price',\n         exportStyle: {\n             format: 'Currency',\n             alignment: {\n                 horizontal: 'Right'\n             },\n             font: {\n                 italic: true\n             }\n         }\n     }\n\nYou could also define it as an array of objects, each object having a `type`\nthat specifies by which exporter will be used:\n\n     {\n         xtype: 'numbercolumn',\n         dataIndex: 'price',\n         exportStyle: [{\n             type: 'html', // used by the `{@link #cfg!html html}` exporter\n             format: 'Currency',\n             alignment: {\n                 horizontal: 'Right'\n             },\n             font: {\n                 italic: true\n             }\n         },{\n             type: 'csv', // used by the `csv` exporter\n             format: 'General'\n         }]\n     }\n\nOr you can define it as an array of objects that has:\n\n- one object with no `type` key that is considered the style to use by all exporters\n- objects with the `type` key defined that are exceptions of the above rule\n\n     {\n         xtype: 'numbercolumn',\n         dataIndex: 'price',\n         exportStyle: [{\n             // no type defined means this is the default\n             format: 'Currency',\n             alignment: {\n                 horizontal: 'Right'\n             },\n             font: {\n                 italic: true\n             }\n         },{\n             type: 'csv', // only the CSV exporter has a special style\n             format: 'General'\n         }]\n     }\n"
    },
    {
      "name": "exportSummaryRenderer",
      "type": "Boolean/Function/String",
      "defaultValue": "false",
      "description": "\nThis config is similar to {@link #cfg!exportRenderer #exportRenderer} but is applied to summary\nrecords.\n"
    },
    {
      "name": "filter",
      "type": "Object/Boolean",
      "defaultValue": "null"
    },
    {
      "name": "filterType",
      "defaultValue": "null",
      "description": "A {@link Ext.grid.plugin.filterbar.filters.Base} configuration.\n\nThis filter type is used by the {@link Ext.grid.plugin.filterbar.FilterBar} plugin.\n"
    },
    {
      "name": "flex",
      "type": "Number/String/Object",
      "defaultValue": "null",
      "description": "The flex of this item *if* this item item is inside a {@link Ext.layout.HBox}\nor {@link Ext.layout.VBox} layout.\n\nYou can also update the flex of a component dynamically using\nthe {@link Ext.layout.FlexBox#setItemFlex} method.\n\nWhen supplied as a string or number this option supports the same syntax\nas CSS [flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex).\nFor example:\n\n    flex: '1 2 auto'\n\nsets `flex-grow` property to `0`, `flex-shrink` to `2` and `flex-basis` to\n`'auto'`.\n\nThe default `flex-shrink` value for box layout items is set to `0` in the\nstylesheet, which is different from the browser's default `flex-shrink` value\nof `1`.  This accommodates the majority use case for applications since where\nnon-flexed components are typically not expected to shrink smaller than their\ndefault size.\n\nFor convenience when only a single number is supplied it is used as the value\nfor both `flex-grow` and `flex-shrink`, for example `flex: 3` is the same as\n`flex: '3 3'`\n\nAn object form is also accepted:\n\n    flex: {\n        grow: 1,\n        shrink: 2,\n        basis: 'auto'\n    }\n\nWhen the object form is supplied `shrink` always defaults to `0` regardless\nof the value of `grow`.\n\nAlthough `'auto'` is the default value for flex-basis, flex-basis defaults to 0%\nwhen flex is supplied as a single numeric or string value (e.g. `flex: 1`). If\nthis behavior is not desired either explicitly set flex-basis to `'auto'` or use\nthe object form to set only grow and/or shrink:\n\n    flex: {\n        grow: 2\n    }\n"
    },
    {
      "name": "floated",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "A Component may be floated above all other components in the application. This means that\nthe component is absolutely positioned, and will move to the front and occlude other\nsibling floated component if clicked.\n\nA Floated component may have floated descendants. It will bring these decendants to the\nfront with it when brought to the front of its sibling floated components.\n\nBy default, descendant floated components are all positioned using the viewport\ncoordinate system. To make a floating component a positioning parent for descendants,\nand have the ancestors positioned relatively, configure the parent floated component\nwith `{@link #cfg!relative #cfg-relative}: true`.\n"
    },
    {
      "name": "focusableContainer",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Enable or disable navigation\nwith arrow keys for this FocusableContainer. This option may be useful\nwith nested FocusableContainers, when only the root container should\nhandle keyboard events.\n"
    },
    {
      "name": "focusCls",
      "type": "String",
      "defaultValue": "'x-focused'",
      "description": "CSS class that will be added to focused\ncomponent's {@link #property!focusClsEl #focusClsEl}, and removed when component blurs.\n"
    },
    {
      "name": "formatter",
      "type": "String",
      "defaultValue": "null",
      "description": "This config accepts a format specification as would be used in a `{@link Ext.Template}`\nformatted token. For example `'round(2)'` to round numbers to 2 decimal places\nor `'date(\"Y-m-d\")'` to format a Date.\n\nIn previous releases the `{@link #cfg!renderer renderer}` config had limited abilities to use one\nof the `{@link Ext.util.Format}` methods but `{@link #cfg!formatter formatter}` now replaces that usage and\ncan also handle formatting parameters.\n\nWhen the value begins with `\"this.\"` (for example, `\"this.foo(2)\"`), the\nimplied scope on which \"foo\" is found is the `{@link #cfg!scope scope}` config for the column.\n\nIf the `{@link #cfg!scope scope}` is not given, or implied using a prefix of `\"this\"`, then either the\n{@link #method!getController} or the closest ancestor component\nconfigured as {@link #cfg!defaultListenerScope #defaultListenerScope} is assumed to be the object with the\nmethod.\n"
    },
    {
      "name": "fullscreen",
      "type": "Boolean",
      "description": "Force the component to take up 100% width and height available, by adding it\nto {@link Ext.Viewport}.\n"
    },
    {
      "name": "groupable",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "If the grid is {@link Ext.grid.Grid#cfg!grouped grouped}, the menu for this column\nwill offer to \"Group by this column\" if this is set to `true`.\n\nIf using the {@link Ext.grid.plugin.ViewOptions} plugin, this option\nmay be used to disable the option to group by this column.\n"
    },
    {
      "name": "grouper",
      "type": "Function/String/Object/Ext.util.Grouper",
      "defaultValue": "null",
      "description": "A grouper config object to apply when the standard grouping user interface is\nis invoked. This option is, for example, available in the column's header\nmenu.\n\nNote that a grouper may also be specified as a function which accepts two\nrecords to compare.\n\nA `{@link Ext.app.ViewController}` method can be used like so:\n\n     grouper: 'groupMethodName'\n\nThis is different then a `{@link #cfg!sorter sorter}` in that the `{@link #cfg!grouper grouper}` method is used to\nset the {@link Ext.util.Grouper#cfg!groupFn}. This string returned\nby this method is used to determine group membership. To specify both the\n`grpoupFn` and the `sorterFn`:\n\n     grouper: {\n         groupFn: 'groupMethodName'\n         sorterFn: 'sorterMethodName\n     }\n"
    },
    {
      "name": "groupFormatter",
      "type": "String",
      "defaultValue": "false",
      "description": "This config accepts a format specification as would be used in a `{@link Ext.Template}`\nformatted token. For example `'round(2)'` to round numbers to 2 decimal places\nor `'date(\"Y-m-d\")'` to format a Date.\n\nIt is used by the {@link Ext.grid.plugin.GroupingPanel} plugin when adding groupers\nto the store. When you drag a column from the grid to the grouping panel then\nthe `{@link #cfg!groupFormatter groupFormatter}` will be used to create a new store grouper\n{@link Ext.util.Grouper#cfg!formatter Ext.util.Grouper#formatter}.\n\n**Note:** if summaries are calculated on the server side then the server\nside grouping should match the client side formatter otherwise the\nsummaries may be wrong.\n"
    },
    {
      "name": "groupHeaderTpl",
      "type": "String/String[]/Ext.XTemplate",
      "defaultValue": "null",
      "description": "This config allows a column to replace the default template supplied by the\ngrid's {@link Ext.grid.RowHeader#cfg!tpl groupHeader.tpl}.\n"
    },
    {
      "name": "height",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The height of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "hidden",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Whether or not this Component is hidden (its CSS `display` property is set to `none`).\n\nDefaults to `true` for {@link #cfg!floated #floated} Components.\n"
    },
    {
      "name": "hideable",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "False to prevent the user from hiding this column.\n"
    },
    {
      "name": "hideAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being hidden.  Typically you want to use\nan outbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check\nthe {@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
    },
    {
      "name": "hideMode",
      "type": "'clip'/'display'/'offsets'/'opacity'/'visibility'",
      "defaultValue": "'display'",
      "description": "A String which specifies how this component's DOM element will be hidden. The\naccepted values are any of these:\n\n- `'clip'` : Hide using {@link Ext.dom.Element#static-property!CLIP clip}.\n- `'display'` : Hide using {@link Ext.dom.Element#static-property!DISPLAY display}.\n- `'offsets'` : Hide using positioning {@link Ext.dom.Element#static-property!OFFSETS offsets}.\n- `'opacity'` : Hide using {@link Ext.dom.Element#static-property!OPACITY opacity}.\n- `'visibility'` : Hide using {@link Ext.dom.Element#static-property!VISIBILITY visibility}.\n\nHiding using ``display`` results in having no dimensions as well as resetting\nscroll positions to 0.\n\nThe other modes overcome this but may have different trade-offs in certain\ncircumstances.\n"
    },
    {
      "name": "hideOnMaskTap",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "When using a {@link #cfg!modal} Component, setting this to `true` will hide\nthe modal mask and the Container when the mask is tapped on.\n"
    },
    {
      "name": "hideShowMenuItem",
      "type": "Ext.menu.CheckItem/Object",
      "defaultValue": "{\n    xtype: 'menucheckitem'\n}",
      "description": "The {@link Ext.menu.CheckItem} to be used by the owning grid's\nheader menu to hide or show this column.\n"
    },
    {
      "name": "html",
      "type": "String/Ext.dom.Element/HTMLElement",
      "defaultValue": "null",
      "description": "Optional HTML content to render inside this Component, or a reference to an\nexisting element on the page.\n"
    },
    {
      "name": "id",
      "type": "String",
      "description": "The **unique id of this component instance.**\n\nIt should not be necessary to use this configuration except for singleton objects in\nyour application. Components created with an id may be accessed globally\nusing {@link Ext#method!getCmp Ext.getCmp}.\n\nInstead of using assigned ids, use the {@link #cfg!itemId #itemId} config,\nand {@link Ext.ComponentQuery} which provides selector-based searching\nfor Sencha Components analogous to DOM querying. The {@link Ext.Container} class\ncontains {@link Ext.Container#method!down shortcut methods} to query its descendant Components\nby selector.\n\nNote that this id will also be used as the element id for the containing HTML element\nthat is rendered to the page for this component. This allows you to write id-based CSS\nrules to style the specific instance of this component uniquely, and also to select\nsub-elements using this component's id as the parent.\n\n**Note**: to avoid complications imposed by a unique id also see `{@link #cfg!itemId #itemId}`.\n\nDefaults to an auto-assigned id.\n"
    },
    {
      "name": "ignore",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Setting to `true` prevents this column from being used by plugins such as\n{@link Ext.grid.plugin.ViewOptions} or {@link Ext.grid.plugin.Summary}. It is\nintended for special columns such as the row number or checkbox selection.\n"
    },
    {
      "name": "ignoreExport",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "This flag indicates that this column will be ignored when grid data is exported.\n\nWhen grid data is exported you may want to export only some columns that are\nimportant and not everything. You can set this flag on any column that you want\nto be ignored during export.\n\nThis is used by {@link Ext.grid.plugin.Exporter}.\n"
    },
    {
      "name": "inactiveChildTabIndex",
      "type": "Number",
      "defaultValue": "-1",
      "description": "DOM tabIndex attribute to set on\ninactive Focusable children of this container when using the \"Roaming tabindex\"\ntechnique. This value rarely needs to be changed from its default.\n"
    },
    {
      "name": "innerCls",
      "type": "String",
      "defaultValue": "null",
      "description": "A string to add to the immediate parent element of the inner items of this\ncontainer. That is, items that are not `{@link #cfg!docked docked}`, `{@link #property!positioned positioned}` or `{@link #cfg!floated floated}`. In\nsome containers, `{@link #property!positioned positioned}` items may be in this same element.\n"
    },
    {
      "name": "instanceCls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "\nAn extra CSS class or classes to augment the {@link #property!classCls #classCls} on an individual instance\n"
    },
    {
      "name": "itemId",
      "type": "String",
      "defaultValue": "undefined",
      "description": "An itemId can be used as an alternative way to get a reference to a component when no\nobject reference is available. Instead of using an `{@link #cfg!id #id}` with {@link Ext#method!getCmp Ext#getCmp},\nuse `{@link #cfg!itemId itemId}` with {@link Ext.Container#method!getComponent Ext.Container#getComponent} which will retrieve `{@link #cfg!itemId itemId}`'s or\n{@link #cfg!id #id}'s. Since `{@link #cfg!itemId itemId}`'s are an index to the container's internal MixedCollection,\nthe `{@link #cfg!itemId itemId}` is scoped locally to the container - avoiding potential conflicts with\n{@link Ext.ComponentManager} which requires a **unique** `{@link #cfg!id #id}`.\n\nAlso see {@link #cfg!id #id}, {@link Ext.Container#method!query Ext.Container#query}, {@link Ext.Container#method!down Ext.Container#down} and\n{@link Ext.Container#method!child Ext.Container#child}.\n"
    },
    {
      "name": "items",
      "type": "Array/Object",
      "defaultValue": "null",
      "description": "The child items to add to this Container. This is usually an\narray of Component configurations or instances, for example:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        items: [{\n            xtype: 'panel',\n            html: 'This is an item'\n        }]\n    });\n\nThis may also be specified as an object, the property names of which are `{@link #cfg!itemId itemId}`s, and\nthe property values are child Component config objects, for example:\n\n    @example\n    Ext.create({\n        xtype: 'tabpanel',\n        items: {\n            panel1: {\n                xtype: 'panel',\n                title: 'First panel'\n            },\n            panel2: {\n                xtype: 'panel',\n                title: 'Second panel'\n            }\n        }\n    });\n"
    },
    {
      "name": "keyMap",
      "type": "Object",
      "defaultValue": "null",
      "description": "An object containing handlers for keyboard events. The property names of this\nobject are the key name and any modifiers. The values of the properties are the\ndescriptors of how to handle each event.\n\nThe handler descriptor can be simply the handler function(either the\nliteral function or the method name), or it can be an object with these\nproperties:\n\n - `handler`: The function or its name to call to handle the event.\n - `scope`: The this pointer context (can be \"this\" or \"controller\").\n - `event`: An optional override of the key event to which to listen.\n\n**Important:** Calls to `setKeyMap` do not replace the entire `{@link #cfg!keyMap keyMap}` but\ninstead update the provided mappings. That is, unless `null` is passed as the\nvalue of the `{@link #cfg!keyMap keyMap}` which will clear the `{@link #cfg!keyMap keyMap}` of all entries.\n"
    },
    {
      "name": "keyMapEnabled",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Enables or disables processing keys in the `{@link #cfg!keyMap keyMap}`. This value starts as\n`null` and if it is `null` when `{@link #method!initKeyMap initKeyMap}` is called, it will automatically\nbe set to `true`. Since `{@link #method!initKeyMap initKeyMap}` is called by `{@link Ext.Component}` at the\nproper time, this is not something application code normally handles.\n"
    },
    {
      "name": "keyMapTarget",
      "type": "String",
      "defaultValue": "'el'",
      "description": "The name of the member that should be used to listen for keydown/keypress events.\nThis is intended to be controlled at the class level not per instance.\n"
    },
    {
      "name": "layout",
      "type": "Object/String",
      "defaultValue": "'auto'",
      "description": "Configuration for this Container's layout. Example:\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        layout: {\n            type: 'hbox',\n            align: 'middle'\n        },\n        items: [{\n            xtype: 'panel',\n            flex: 1,\n            bodyStyle: {\n                background: \"#000\",\n                color:\"#fff\"\n            }\n        }, {\n           xtype: 'panel',\n           flex: 2,\n           bodyStyle: {\n               background: \"#f00\",\n               color:\"#fff\"\n           }\n        }]\n    });\n"
    },
    {
      "name": "left",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute left position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "listeners",
      "type": "Object",
      "description": "\nA config object containing one or more event handlers to be added to this object during\ninitialization. This should be a valid listeners config object as specified in the\n{@link Ext.util.Observable#method!addListener addListener} example for attaching\nmultiple handlers at once.\n\n**DOM events from Ext JS {@link Ext.Component}**\n\nWhile _some_ Ext JS Component classes export selected DOM events (e.g. \"click\",\n\"mouseover\" etc), this is usually only done when extra value can be added. For example\nthe {@link Ext.view.View DataView}'s **`{@link Ext.view.View#itemclick itemclick}`**\nevent passing the node clicked on. To access DOM events directly from a child element\nof a Component, we need to specify the `element` option to identify the Component\nproperty to add a DOM listener to:\n\n    new Ext.panel.Panel({\n        width: 400,\n        height: 200,\n        dockedItems: [{\n            xtype: 'toolbar'\n        }],\n        listeners: {\n            click: {\n                element: 'el', //bind to the underlying el property on the panel\n                fn: function(){ console.log('click el'); }\n            },\n            dblclick: {\n                element: 'body', //bind to the underlying body property on the panel\n                fn: function(){ console.log('dblclick body'); }\n            }\n        }\n    });\n"
    },
    {
      "name": "locked",
      "type": "Boolean/String",
      "defaultValue": "null",
      "description": "This config can be used with Locking Grid\nDetermines whether the column is locked or not.\nConfigure as `true` to lock the column to default locked region\n{@link Ext.grid.locked.Grid}\nString values contains one of the defined locking regions - \"left\", \"right\" or \"center\"\n"
    },
    {
      "name": "manageBorders",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "`true` to enable border management of docked items.  When enabled, borders of docked\nitems will collapse where they meet to avoid duplicated borders.\n"
    },
    {
      "name": "margin",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The margin to use on this Component. Can be specified as a number (in which\ncase all edges get the same margin) or a CSS string like '5 10 10 10'\n"
    },
    {
      "name": "masked",
      "type": "Boolean/String/Object/Ext.Mask/Ext.LoadMask",
      "defaultValue": "null",
      "description": "A configuration to allow you to mask this container.\n\nIf the value is a string, it will be used as the message config for an\n{@link Ext.LoadMask}.\n\nFor more precise control over the mask, you can optionally pass an object block with\nand xtype of `loadmask`, and an optional `message` value to display a loading mask.\nPlease refer to the {@link Ext.LoadMask} component to see other configurations.\n\n    @example\n    Ext.create({\n        xtype: 'container',\n        fullscreen: true,\n        html: 'Hello World',\n        masked: {\n            xtype: 'loadmask',\n            message: 'My Message'\n        }\n    });\n\nAlternatively, you can just call the setter at any time with `true`/`false` to show/hide\nthe mask:\n\n    setMasked(true); //show the mask\n    setMasked(false); //hides the mask\n\nThere are also two convenient methods, {@link #method!mask #method-mask} and {@link #method!unmask #unmask}, to allow\nyou to mask and unmask this container at any time.\n\nRemember, the {@link Ext.Viewport} is always a container, so if you want to mask your\nwhole application at anytime, can call:\n\n    Ext.Viewport.setMasked({\n        xtype: 'loadmask',\n        message: 'Hello'\n    });\n"
    },
    {
      "name": "maxHeight",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The maximum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
    },
    {
      "name": "maxWidth",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The maximum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size. Note that this config will not apply if the\nComponent is 'positioned' (absolutely positioned or centered)\n"
    },
    {
      "name": "menu",
      "type": "Ext.menu.Menu/Object",
      "defaultValue": "{}",
      "description": "An optional menu configuration object which is merged with the grid's\n{@link #cfg!columnMenu} to create this column's header menu. This can be set\nto `null` to remove the menu from this column. To dynamically change whether\nthe menu should be enabled or not use the `{@link #cfg!menuDisabled menuDisabled}` config.\n\nThe grid's {@link Ext.grid.Grid#cfg!columnMenu} provides the sort items, this\nconfig can be used to add column-specific menu items or override aspects of\nthe common items.\n"
    },
    {
      "name": "menuDisabled",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` to disable this column's `{@link #cfg!menu menu}` containing sort/hide options.\nThis can be useful if the menu will be dynamically available since setting\n`{@link #cfg!menu menu}` to `null` will eliminate the menu making dynamic changes to its\navailability more expensive.\n"
    },
    {
      "name": "minHeight",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The minimum height of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "minWidth",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The minimum width of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "modal",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "`true` to make this Component modal. This will create a mask underneath the\nComponent that covers its parent and does not allow the user to interact with\nany other Components until this Component is dismissed.\n"
    },
    {
      "name": "modelValidation",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "This config enables binding to your `{@link Ext.data.Model#cfg!validators Ext.data.Model#validators}`. This\nis only processed by form fields (e.g., `Ext.field.*`) at present, however, this\nsetting is inherited and so can be set on a parent container.\n\nWhen set to `true` by a component (or by an ancestor container), the `validators`\nof for any {@Ext.data.Model record} fields will be used wherever the `value` is\nbound to such data fields.\n\nWhile this config can be set arbitrarily high in the component hierarchy, doing\nso can create a lot overhead if most of your form fields do not actually rely on\n`validators` in your data model.\n\nUsing this setting for a form that is bound to an `{@link Ext.data.Model}` might look\nlike this:\n\n     {\n         xtype: 'panel',\n         modelValidation: true,\n         items: [{\n             xtype: 'textfield',\n             bind: '{theUser.firstName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.lastName}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.phoneNumber}'\n         },{\n             xtype: 'textfield',\n             bind: '{theUser.email}'\n         }]\n     }\n"
    },
    {
      "name": "name",
      "type": "String",
      "defaultValue": "null",
      "description": "Name for the widget to be used with {@link Ext.Container#method!lookupName Ext.Container#lookupName}\net al.\n"
    },
    {
      "name": "nameable",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` for this component's `name` property to be tracked by its containing\n`nameHolder`.\n"
    },
    {
      "name": "nameHolder",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "When `true` child components are tracked by their `name` property and can be\nretrieved using the `{@link #method!lookupName lookupName}` method.\n"
    },
    {
      "name": "padding",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The padding to use on this Component. Can be specified as a number (in which\ncase all edges get the same padding) or a CSS string like '5 10 10 10'\n"
    },
    {
      "name": "plugins",
      "type": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
      "defaultValue": "null",
      "description": "This config describes one or more plugin config objects used to create plugin\ninstances for this component.\n\nPlugins are a way to bundle and reuse custom functionality. Plugins should extend\n`{@link Ext.plugin.Abstract}` but technically the only requirement for a valid plugin\nis that it contain an `init` method that accepts a reference to its owner. Once\na plugin is created, the owner will call the `init` method, passing a reference\nto itself. Each plugin can then call methods or respond to events on its owner\nas needed to provide its functionality.\n\nThis config's value can take several different forms.\n\nThe value can be a single string with the plugin's {@link Ext.enums.Plugin alias}:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: 'listpaging'\n     });\n\nIn the above examples, the string \"listpaging\" is the type alias for\n`{@link Ext.dataview.plugin.ListPaging}`. The full alias includes the \"plugin.\" prefix\n(i.e., 'plugin.listpaging').\n\nThe preferred form for multiple plugins or to configure plugins is the\nkeyed-object form (new in version 6.5):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: {\n             pullrefresh: true,\n             listpaging: {\n                 autoPaging: true,\n                 weight: 10\n             }\n         }\n     });\n\nThe object keys are the `id`'s as well as the default type alias. This form\nallows the value of the `{@link #cfg!plugins plugins}` to be merged from base class to derived class\nand finally with the instance configuration. This allows classes to define a\nset of plugins that derived classes or instantiators can further configure or\ndisable. This merge behavior is a feature of the\n{@link Ext.Class#cfg!config}.\n\nThe `{@link #cfg!plugins plugins}` config can also be an array of plugin aliases (arrays are not\nmerged so this form does not respect plugins defined by the class author):\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['listpaging', 'pullrefresh']\n     });\n\nAn array can also contain elements that are config objects with a `type`\nproperty holding the type alias:\n\n     var list = Ext.create({\n         xtype: 'list',\n         itemTpl: '<div class=\"item\">{title}</div>',\n         store: 'Items',\n\n         plugins: ['pullrefresh', {\n             type: 'listpaging',\n             autoPaging: true\n         }]\n     });\n"
    },
    {
      "name": "publishes",
      "type": "String/String[]/Object",
      "defaultValue": "null",
      "description": "One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.\n\n**Note:** We'll discuss publishing properties **not** found in the config block below.\n\nValues determined to be invalid by component (often form fields and model validations)\nwill not be published to the ViewModel.\n\nThis config uses the `{@link #cfg!reference #cfg-reference}` to determine the name of the data\nobject to place in the `ViewModel`. If `{@link #cfg!reference reference}` is not set then this config\nis ignored.\n\nBy using this config and `{@link #cfg!reference #cfg-reference}` you can bind configs between\ncomponents. For example:\n\n     ...\n         items: [{\n             xtype: 'textfield',\n             reference: 'somefield',  // component's name in the ViewModel\n             publishes: 'value' // value is not published by default\n         },{\n             ...\n         },{\n             xtype: 'displayfield',\n             bind: 'You have entered \"{somefield.value}\"'\n         }]\n     ...\n\nClasses must provide this config as an Object:\n\n     Ext.define('App.foo.Bar', {\n         publishes: {\n             foo: true,\n             bar: true\n         }\n     });\n\nThis is required for the config system to properly merge values from derived\nclasses.\n\nFor instances this value can be specified as a value as show above or an array\nor object as follows:\n\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: [\n             'value',\n             'rawValue',\n             'dirty'\n         ]\n     }\n\n     // This achieves the same result as the above array form.\n     {\n         xtype: 'textfield',\n         reference: 'somefield',\n         publishes: {\n             value: true,\n             rawValue: true,\n             dirty: true\n         }\n     }\n\nIn some cases, users may want to publish a property to the viewModel that is not found\nin a class  config block. In these situations, you may utilize {@link #method!publishState #publishState}\nif the property has a  setter method. Let's use\n{@link Ext.form.Labelable#setFieldLabel setFieldLabel} as an example:\n\n      setFieldLabel: function(fieldLabel) {\n          this.callParent(arguments);\n          this.publishState('fieldLabel', fieldLabel);\n      }\n\nWith the above chunk of code, fieldLabel may now be published to the viewModel.\n"
    },
    {
      "name": "record",
      "type": "Ext.data.Model",
      "defaultValue": "null",
      "description": "A model instance which updates the Component's html based on it's tpl. Similar\nto the data configuration, but tied to to a record to make allow dynamic\nupdates.  This must be a model instance and not a configuration of one.\n"
    },
    {
      "name": "reference",
      "type": "String",
      "defaultValue": "null",
      "description": "Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its {@link Ext.Container#cfg!referenceHolder view}\nor its {@link Ext.app.ViewController}. See the documentation in\n{@link Ext.Container Ext.container.Container} for more information about references.\n\n**Note**: Valid identifiers start with a letter or underscore and are followed\nby zero or more additional letters, underscores or digits. References are case\nsensitive.\n"
    },
    {
      "name": "referenceHolder",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If `true`, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified `reference` config will be held. The container\nwill automatically become a referenceHolder if a {@link #cfg!controller #controller} is specified.\n\nSee the introductory docs for {@link Ext.Container Ext.container.Container} for more information\nabout references & reference holders.\n"
    },
    {
      "name": "relative",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure this as `true` if you require descendant floated components to be positioned\nrelative to this component's coordinate space, not the viewport's coordinate space.\n\n*Note:* The coordinate space is this Component's encapsulating element's area. Not that\nof the inner element in which static child items are rendered by the layout.\n"
    },
    {
      "name": "renderer",
      "type": "Function/String",
      "defaultValue": "null",
      "description": "A renderer is a method which can be used to transform data (value, appearance, etc.)\nbefore it is rendered.\n\nFor example:\n\n     {\n         text: 'Some column',\n         dataIndex: 'fieldName',\n\n         renderer: function(value, record) {\n             if (value === 1) {\n                 return '1 person';\n             }\n             return value + ' people';\n         }\n     }\n\nIf a string is supplied, it should be the name of a renderer method from the\nappropriate {@link Ext.app.ViewController}.\n\nThis config is only processed if the {@link #cfg!cell #cell} type is the default of\n{@link Ext.grid.cell.Cell}.\n\n**Note** See {@link Ext.grid.Grid} documentation for other, better alternatives\nto rendering cell content.\n"
    },
    {
      "name": "renderTo",
      "type": "Ext.dom.Element",
      "defaultValue": "null",
      "description": "Optional element to render this Component to.\nNot required if this component is an {@link Ext.Container#cfg!items item} of a Container\nof a Container.\n"
    },
    {
      "name": "reserveScrollbar",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Passed in from the owning grid's own configuration\n"
    },
    {
      "name": "resetFocusPosition",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "When `true`, FocusableContainer\nwill reset last focused position whenever focus leaves the container.\nSubsequent tabbing into the container will always focus the first eligible\nchild item.\n\nWhen `false`, subsequent tabbing into the container will focus the child\nitem that was last focused before.\n"
    },
    {
      "name": "resizable",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "False to prevent the column from being resizable.\nNote that this configuration only works when the\n{@link Ext.grid.plugin.ColumnResizing} plugin is enabled on the\n{@link Ext.grid.Grid}.\n"
    },
    {
      "name": "right",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute right position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "ripple",
      "type": "Boolean/Object/String",
      "defaultValue": "null",
      "description": "Set to truthy, Color or Object value for the ripple.\n"
    },
    {
      "name": "scope",
      "type": "Object",
      "defaultValue": "null",
      "description": "The scope to use when calling the {@link #cfg!renderer #renderer} or {@link #cfg!formatter #formatter} function.\n"
    },
    {
      "name": "scratchCell",
      "type": "Ext.grid.cell.Cell/Object",
      "defaultValue": "true"
    },
    {
      "name": "scrollable",
      "type": "Boolean/String/Object",
      "defaultValue": "null",
      "description": "Configuration options to make this Component scrollable. Acceptable values are:\n\n- `true` to enable auto scrolling.\n- `false` (or `null`) to disable scrolling - this is the default.\n- `{@link #cfg!x x}` or `horizontal` to enable horizontal scrolling only\n- `{@link #cfg!y y}` or `vertical` to enable vertical scrolling only\n\nAlso accepts a configuration object for a `{@link Ext.scroll.Scroller}` if\nif advanced configuration is needed.\n\nThe getter for this config returns the {@link Ext.scroll.Scroller}\ninstance.  You can use the Scroller API to read or manipulate the scroll position:\n\n    // scrolls the component to 5 on the x axis and 10 on the y axis\n    component.getScrollable().scrollTo(5, 10);\n"
    },
    {
      "name": "session",
      "type": "Boolean/Object/Ext.data.Session",
      "defaultValue": "null",
      "description": "If provided this creates a new `Session` instance for this component. If this\nis a `Container`, this will then be inherited by all child components.\n\nTo create a new session you can specify `true`:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: true,\n\n         items: [{\n             ...\n         }]\n     });\n\nAlternatively, a config object can be provided:\n\n     Ext.create({\n         xtype: 'viewport',\n         session: {\n             ...\n         },\n\n         items: [{\n             ...\n         }]\n     });\n"
    },
    {
      "name": "shadow",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Configure as `true` for the component to have a drop shadow. 'false' will suppress any\ndefault shadow. By default the theme will determine the presence of a shadow.\n"
    },
    {
      "name": "shareableName",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "Set to `true` to allow this component's `name` to be shared by other items in the\nsame `nameHolder`. Such items will be returned in an array from `lookupName`.\n"
    },
    {
      "name": "shim",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nConfigure as `true` for the component to use an `<iframe>` as an underlay to ensure\ncertain non-standard browser plugins are occluded by this component.\n"
    },
    {
      "name": "showAnimation",
      "type": "String/Mixed",
      "defaultValue": "null",
      "description": "Animation effect to apply when the Component is being shown.  Typically you want to use\nan inbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the\n{@link Ext.fx.Animation#cfg!type Ext.fx.Animation#type} config.\n"
    },
    {
      "name": "sortable",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "False to disable sorting of this column. Whether local/remote sorting is used is\nspecified in `{@link Ext.data.Store#cfg!remoteSort Ext.data.Store#remoteSort}`.\n"
    },
    {
      "name": "sorter",
      "type": "Function/String/Object/Ext.util.Sorter",
      "defaultValue": "true",
      "description": "A sorter config object to apply when the standard sort user interface is\nis invoked. This is usually clicking this column header, but there are also\nmenu options to sort ascending or descending.\n\nNote that a sorter may also be specified as a function which accepts two\nrecords to compare.\n\nA `{@link Ext.app.ViewController}` method can be used like so:\n\n     sorter: 'sorterMethodName'\n\nOr more explicitly:\n\n     sorter: {\n         sorterFn: 'sorterMethodName'\n     }\n\nBy default sorting is based on the `{@link #cfg!dataIndex dataIndex}` but this can be adjusted\nlike so:\n\n     sorter: {\n         property: 'otherProperty'\n     }\n"
    },
    {
      "name": "stateful",
      "type": "Boolean/Object/String[]",
      "defaultValue": "false",
      "description": "\nThis config specifies the config properties that will be persisted using the\n{@link Ext.state.Provider}. If this config is set to `true`, the\nconfigs specified by `{@link #cfg!statefulDefaults statefulDefaults}` will be assumed.\n\n     stateful: true\n\nOtherwise, this config can be an array of strings of the properties to save:\n\n     stateful: [\n         'width',\n         'height',\n         'collapsed'\n     ]\n\nThe above is equivalent to:\n\n     stateful: {\n         width: true,\n         height: true,\n         collapsed: true\n     }\n\n**Note:** To be truly stateful, an `id` or `{@link #cfg!stateId stateId}` must also be assigned.\n\nA stateful object will save its state when any of these config properties change\nvalue.\n"
    },
    {
      "name": "statefulDefaults",
      "type": "Object/String[]",
      "defaultValue": "null",
      "description": "The default set of {@link #cfg!stateful} properties. The form of this config\nis the same as {@link #cfg!stateful} except this config cannot be a Boolean.\n\nThis config is intended for classes to specify so that instances can simply\nenable statefulness using `stateful: true`.\n"
    },
    {
      "name": "stateId",
      "type": "String",
      "defaultValue": "null",
      "description": "The unique id for this object to use for state management purposes.\n"
    },
    {
      "name": "style",
      "type": "String/Object",
      "defaultValue": "null",
      "description": "Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.\n\nYou can pass either a string syntax:\n\n    style: 'background:red'\n\nOr by using an object:\n\n    style: {\n        background: 'red'\n    }\n\nWhen using the object syntax, you can define CSS Properties by using a string:\n\n    style: {\n        'border-left': '1px solid red'\n    }\n\nAlthough the object syntax is much easier to read, we suggest you to use the\nstring syntax for better performance.\n"
    },
    {
      "name": "summaries",
      "type": "Object/String[]",
      "defaultValue": "{\n    count: true\n}",
      "description": "This config is used by {@link Ext.grid.plugin.Summaries} plugin.\n\nDefine here what functions are available for your users to choose from\nwhen they want to change the summary type on this column. By default only\n`count` is supported but you can add more summary functions.\n\n     {\n         xtype: 'column',\n         summaries: {\n             sum: true,\n             average: true,\n             count: false\n         }\n     }\n\n Or like this if you want to bring new functions in:\n\n     {\n         xtype: 'column',\n         summaries: {\n             calculateSomething: true\n         }\n     }\n\n In such case `calculateSomething` needs to be defined as a summary function.\n For this you need to define a summary class like this:\n\n     Ext.define('Ext.data.summary.CalculateSomething', {\n         extend: 'Ext.data.summary.Base',\n         alias: 'data.summary.calculateSomething',\n\n         text: 'Calculate something',\n\n         calculate: function (records, property, root, begin, end) {\n             // do your own calculation here\n         }\n     });\n"
    },
    {
      "name": "summary",
      "type": "String",
      "defaultValue": "null",
      "description": "This config replaces the default mechanism of acquiring a summary result from\nthe summary record. When specified, this string is the name of a summary type:\n\n - {@link Ext.data.summary.Average}\n - {@link Ext.data.summary.Count}\n - {@link Ext.data.summary.Max}\n - {@link Ext.data.summary.Min}\n - {@link Ext.data.summary.Sum}\n\nThe summary is based on either the {@link #cfg!summaryDataIndex} or the\n{@link #cfg!dataIndex} if there is no `{@link #cfg!summaryDataIndex summaryDataIndex}`.\n\nThis config is only valid when all data is available client-side to calculate\nsummaries.\n\nIt is generally best to allow the summary {@link Ext.data.Model} to\ncomputer summary values (and not use this config). In some cases, however,\nthis config can be useful to isolate summary calculations to only certain grids.\n\nTo implement a custom summary for a column, use {@link #cfg!summaryRenderer}.\n"
    },
    {
      "name": "summaryCell",
      "type": "Object",
      "defaultValue": "null",
      "description": "The config object used to create {@link Ext.grid.cell.Base} in\n{@link Ext.grid.SummaryRow} for this column.\n"
    },
    {
      "name": "summaryDataIndex",
      "type": "String",
      "defaultValue": "null",
      "description": "For {@link Ext.grid.SummaryRow} this config overrides the normal\n`{@link #cfg!dataIndex dataIndex}` to use from the summary record.\n"
    },
    {
      "name": "summaryFormatter",
      "type": "String",
      "defaultValue": "null",
      "description": "This summaryFormatter is similar to {@link #cfg!formatter #formatter} but is called before\ndisplaying a value in the SummaryRow. The config is optional, if not specified\nthe default calculated value is shown. The summaryFormatter is called with:\n\n - value: The calculated value.\n\nNote that this configuration only works when the grid has the\n{@link Ext.grid.plugin.Summary} plugin enabled.\n"
    },
    {
      "name": "summaryRenderer",
      "type": "Function/String",
      "defaultValue": "null",
      "description": "This summaryRenderer is called to render the value to display in a cell of a\nsummary row. If the value of this config is a String, it is the name of the\nrenderer method on the associated {@link Ext.Component#cfg!controller controller}.\n"
    },
    {
      "name": "summaryType",
      "type": "String/Function",
      "defaultValue": "null",
      "description": "This configuration specifies the type of summary. There are several built in\nsummary types. These call underlying methods on the store:\n\n - {@link Ext.data.Store#method!count count}\n - {@link Ext.data.Store#method!sum sum}\n - {@link Ext.data.Store#method!min min}\n - {@link Ext.data.Store#method!max max}\n - {@link Ext.data.Store#method!average average}\n\nAny other name is assumed to be the name of a method on the associated\n{@link Ext.app.ViewController}.\n\nNote that this configuration only works when the grid has the\n{@link Ext.grid.plugin.Summary} plugin enabled.\n"
    },
    {
      "name": "tabIndex",
      "type": "Number",
      "defaultValue": "null",
      "description": "DOM tabIndex attribute for this component's\n{@link #property!focusEl #focusEl}.\n"
    },
    {
      "name": "text",
      "type": "String",
      "defaultValue": "'\\xa0'",
      "description": "The header text to be used as innerHTML (html tags are accepted) to display in the\nGrid.\n\n**Note**: to have a clickable header with no text displayed you can use the default\nnon-breaking space (`&nbsp;`).\n"
    },
    {
      "name": "toFrontOnShow",
      "type": "Boolean",
      "defaultValue": "true",
      "description": "True to automatically call {@link #method!toFront #toFront} when a {@link #cfg!floated #cfg-floated} Component is\nshown.\n"
    },
    {
      "name": "toolDefaults",
      "type": "Object",
      "defaultValue": "{\n    xtype: 'tool',\n    zone: 'end'\n}",
      "description": "The properties of this object are shallow copied (via {@link Ext#method!applyIf applyIf()}\nas opposed to {@link Ext#method!merge Ext.merge()} to each tool declared in the `{@link #cfg!tools tools}`\nconfig.\n"
    },
    {
      "name": "tools",
      "type": "Ext.Tool[]/Object/Object[]",
      "defaultValue": "null",
      "description": "An array of {@link Ext.Tool} configs or an object keyed by `itemId`.\n"
    },
    {
      "name": "tooltip",
      "type": "String/Object",
      "defaultValue": "null",
      "description": "The tooltip for this component - can be a string to be used as innerHTML\n(html tags are accepted) or {@link Ext.tip.ToolTip} config object.\n\nThe default behavior is to use a shared tip instance. The tooltip configuration is\nregistered with the {@link Ext.tip.Manager}. To enable this, your application can set\nthe {@link Ext.app.Application#cfg!quickTips Ext.app.Application#quickTips} config, or an instance of the\n{@link Ext.tip.Manager} may be created manually.\n\nTo force a unique tooltip instance to be created, specify `autoCreate: true` on this\nconfiguration.\n\nConfiguring this with `autoHide: false` implies `autoCreate: true` so that the desired\npersistent behavior can be obtained with other targets still showing the singleton\ninstance.\n"
    },
    {
      "name": "top",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The absolute top position of this Component; must be a valid CSS length value,\ne.g: `300`, `100px`, `30%`, etc. Explicitly setting this value will make this Component\nbecome 'positioned', which means it will no longer participate in the layout of the\nContainer that it resides in.\n"
    },
    {
      "name": "touchAction",
      "type": "Object",
      "defaultValue": "null",
      "description": "\nEmulates the behavior of the CSS\n[touch-action](https://www.w3.org/TR/pointerevents/#the-touch-action-css-property)\nproperty in a cross-browser compatible manner.\n\nKeys in this object are touch action names, and values are `false` to disable\na touch action or `true` to enable it.  Accepted keys are:\n\n- `panX`\n- `panY`\n- `pinchZoom`\n- `doubleTapZoom`\n\nAll touch actions are enabled (`true`) by default, so it is usually only necessary\nto specify which touch actions to disable.  For example, the following disables\nonly horizontal scrolling and pinch-to-zoom on the component's main element:\n\n    touchAction: {\n        panX: false,\n        pinchZoom: false\n    }\n\nTouch actions can be specified on reference elements using the reference element\nname, for example:\n\n    // disables horizontal scrolling on the main element, and double-tap-zoom\n    // on the child element named \"body\"\n    touchAction: {\n        panY: false\n        body: {\n            doubleTapZoom: false\n        }\n    }\n\nThe primary motivation for setting the touch-action of an element is to prevent\nthe browser's default handling of a gesture such as pinch-to-zoom, or\ndrag-to-scroll, so that the application can implement its own handling of that\ngesture on the element.  Suppose, for example, a component has a custom drag\nhandler on its element and wishes to prevent horizontal scrolling of its container\nwhile it is being dragged:\n\n    Ext.create('Ext.Widget', {\n        touchAction: {\n            panX: false\n        },\n        listeners: {\n            drag: function(e) {\n                // implement drag logic\n            }\n        }\n    });\n"
    },
    {
      "name": "tpl",
      "type": "String/String[]/Ext.XTemplate",
      "defaultValue": "null",
      "description": "An {@link Ext.XTemplate}, or an XTemplate *definition string* to use\nto process a {@link Ext.data.Model} data to produce a cell's rendered\nvalue.\n\n    @example\n    Ext.create('Ext.data.Store', {\n        storeId:'employeeStore',\n        fields:['firstname', 'lastname', 'seniority', 'department'],\n        groupField: 'department',\n        data:[\n            { firstname: \"Michael\", lastname: \"Scott\",   seniority: 7, department: \"Management\" },\n            { firstname: \"Dwight\",  lastname: \"Schrute\", seniority: 2, department: \"Sales\" },\n            { firstname: \"Jim\",     lastname: \"Halpert\", seniority: 3, department: \"Sales\" },\n            { firstname: \"Kevin\",   lastname: \"Malone\",  seniority: 4, department: \"Accounting\" },\n            { firstname: \"Angela\",  lastname: \"Martin\",  seniority: 5, department: \"Accounting\" }\n        ]\n    });\n\n    Ext.create('Ext.grid.Panel', {\n        title: 'Column Template Demo',\n        store: Ext.data.StoreManager.lookup('employeeStore'),\n        columns: [{\n            text: 'Full Name',\n            tpl: '{firstname} {lastname}'\n        }, {\n            text: 'Department (Yrs)',\n            tpl: '{department} ({seniority})'\n        }],\n        height: 200,\n        width: 300,\n        renderTo: Ext.getBody()\n    });\n\nThis config is only processed if the {@link #cfg!cell #cell} type is the default of\n{@link Ext.grid.cell.Cell}.\n\n**Note** See {@link Ext.grid.Grid} documentation for other, better alternatives\nto rendering cell content.\n"
    },
    {
      "name": "tplWriteMode",
      "type": "String",
      "defaultValue": "'overwrite'",
      "description": "The Ext.(X)Template method to use when updating the content area of the\nComponent.\n\nValid modes are:\n\n- append\n- insertAfter\n- insertBefore\n- insertFirst\n- overwrite\n"
    },
    {
      "name": "translatable",
      "type": "Object",
      "defaultValue": "null"
    },
    {
      "name": "twoWayBindable",
      "type": "String/String[]/Object",
      "defaultValue": "null",
      "description": "This object holds a map of `config` properties that will update their binding\nas they are modified. For example, `value` is a key added by form fields. The\nform of this config is the same as `{@link #cfg!publishes}`.\n\nThis config is defined so that updaters are not created and added for all\nbound properties since most cannot be modified by the end-user and hence are\nnot appropriate for two-way binding.\n"
    },
    {
      "name": "ui",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "The ui or uis to be used on this Component\n\nWhen a ui is configured, CSS class names are added to the {@link #property!element #element}, created\nby appending the ui name(s) to each {@link #property!classCls #classCls} and/or {@link #property!baseCls #baseCls}.\n"
    },
    {
      "name": "userCls",
      "type": "String/String[]",
      "defaultValue": "null",
      "description": "One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.\n\nFor example:\n\n     items: [{\n         xtype: 'button',\n         userCls: 'my-button'\n     ...\n     }]\n"
    },
    {
      "name": "userSelectable",
      "type": "Boolean/String/Object",
      "defaultValue": "false",
      "description": "\nSetting the value to true implies `auto`, while false implies `none`. Setting the value\nto `text` allows users to select text within this component. The value may also be an\nobject keyed by child element name as seen below.\n\nCan also be any valid value for the CSS3\n[user-select](https://developer.mozilla.org/en-US/docs/Web/CSS/user-select) property.\n\n\nBy default, the user cannot click+drag+select text/elements of the UI.  Applications may\nwant to enable user selection for specific DOM elements, such as the bodyElement of\na component used as a tab panel.  The tab and tab text would not be user selectable in\nthis example, but the content area when the tab is selected would.\n\n     userSelectable: {\n         element: true,       // allow the element to be user selectable\n         bodyElement: true    // allow the component's body element to be user selectable\n     }\n"
    },
    {
      "name": "verticalOverflow",
      "type": "Boolean",
      "defaultValue": "null",
      "description": "Updated by the grid to inform the header container whether it must account for a\nvertical scrollbar.\n"
    },
    {
      "name": "viewModel",
      "type": "String/Object/Ext.app.ViewModel",
      "defaultValue": "null",
      "description": "The `ViewModel` is a data provider for this component and its children. The\ndata contained in the `ViewModel` is typically used by adding `{@link #cfg!bind bind}` configs\nto the components that want present or edit this data.\n\nWhen set, the `ViewModel` is created and links to any inherited `{@link #cfg!viewModel viewModel}`\ninstance from an ancestor container as the \"parent\". The `ViewModel` hierarchy,\nonce established, only supports creation or destruction of children. The\nparent of a `ViewModel` cannot be changed on the fly.\n\nIf this is a root-level `ViewModel`, the data model connection is made to this\ncomponent's associated `{@link Ext.data.Session}`. This is\ndetermined by calling `getInheritedSession`.\n"
    },
    {
      "name": "weight",
      "type": "Number",
      "defaultValue": "0",
      "description": "This value controls this item's order in a {@link Ext.Container#cfg!weighted}\n{@link Ext.Container} (see {@link #cfg!parent}).\n\nLower values gravitate towards the start of the container - the top in vertical layouts,\nthe locale start side in horizontal layouts.\n"
    },
    {
      "name": "weighted",
      "type": "Boolean",
      "defaultValue": "false",
      "description": "If set to `true`, then child {@link #cfg!items} may be specified as a object,\nwith each property name specifying an {@link #cfg!itemId}, and the property\nvalue being the child item configuration object.\n\nWhen using this scheme, each child item may contain a {@link #cfg!weight}\nconfiguration value which affects its order in this container. Lower weights\nare towards the start, higher weights towards the end.\n"
    },
    {
      "name": "width",
      "type": "Number/String",
      "defaultValue": "null",
      "description": "The width of this Component; must be a valid CSS length value, e.g: `300`, `100px`,\n`30%`, etc. By default, if this is not explicitly set, this Component's element will\nsimply have its own natural size. If set to `auto`, it will set the width to `null`\nmeaning it will have its own natural size.\n"
    },
    {
      "name": "x",
      "type": "Number",
      "defaultValue": "0",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
    },
    {
      "name": "xtype",
      "type": "String",
      "description": "The `{@link #cfg!xtype xtype}` configuration option can be used to optimize Component creation and rendering.\nIt serves as a shortcut to the full component name. For example, the component\n`Ext.button.Button` has an xtype of `button`.\n\nYou can define your own xtype on a custom {@link Ext.Component} like so:\n\n    Ext.define('PressMeButton', {\n        extend: 'Ext.button.Button',\n        xtype: 'pressmebutton',\n        text: 'Press Me'\n    });\n\nAny Component can be created implicitly as an object config with an xtype specified,\nallowing it to be declared and passed into the rendering pipeline without actually being\ninstantiated as an object. Not only is rendering deferred, but the actual creation of the\nobject itself is also deferred, saving memory and resources until they are actually needed.\nIn complex, nested layouts containing many Components, this can make a noticeable\nimprovement in performance.\n\n    // Explicit creation of contained Components:\n    var panel = new Ext.Panel({\n       // ...\n       items: [\n          Ext.create('Ext.button.Button', {\n             text: 'OK'\n          })\n       ]\n    });\n\n    // Implicit creation using xtype:\n    var panel = new Ext.Panel({\n       // ...\n       items: [{\n          xtype: 'button',\n          text: 'OK'\n       }]\n    });\n\nIn the first example, the button will always be created immediately during the panel's\ninitialization. With many added Components, this approach could potentially slow the\nrendering of the page. In the second example, the button will not be created or rendered\nuntil the panel is actually displayed in the browser. If the panel is never displayed\n(for example, if it is a tab that remains hidden) then the button will never be created and\nwill never consume any resources whatsoever.\n"
    },
    {
      "name": "y",
      "type": "Number",
      "defaultValue": "0",
      "description": "*Only valid when a component is `{@link #cfg!floated #cfg-floated}`*\n\nThe x position at which to position this component. This is usually viewport-relative.\nBut if there is a `{@link #cfg!relative #relative}: true` ancestor, it will be relative to that.\n"
    },
    {
      "name": "zIndex",
      "type": "Number",
      "defaultValue": "null",
      "description": "The z-index to give this Component when it is rendered.\n\nNot valid for {@link #cfg!floated #cfg-floated} Components. The Z ordering of {@link #cfg!floated #cfg-floated}\nComponents is managed by ordering of the DOM elements.\n"
    }
  ],
  "methods": [
    {
      "name": "_addDeclaredListeners",
      "params": [
        {
          "name": "listeners",
          "type": "Array"
        }
      ]
    },
    {
      "name": "_fixReference"
    },
    {
      "name": "_flushStateful"
    },
    {
      "name": "_getStateId",
      "params": []
    },
    {
      "name": "activatePlugin",
      "params": [
        {
          "name": "type",
          "type": "String",
          "description": "The `type` of the plugin.\n"
        }
      ]
    },
    {
      "name": "add",
      "params": [
        {
          "name": "newItems",
          "type": "Object/Object[]/Ext.Component/Ext.Component[]",
          "description": "The new item(s) to add\nto the Container. Note that if an array of items to add was passed in, an array of added\nitems will be returned as well even if there was only one item.\n"
        }
      ]
    },
    {
      "name": "addAfterListener"
    },
    {
      "name": "addBeforeListener"
    },
    {
      "name": "addCls",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]",
          "description": "The CSS class(es) to add.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "Optional prefix to add to each class.\n"
        },
        {
          "name": "suffix",
          "type": "String",
          "description": "Optional suffix to add to each class.\n"
        }
      ]
    },
    {
      "name": "addDelegatedListener",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "options"
        },
        {
          "name": "order"
        },
        {
          "name": "caller"
        },
        {
          "name": "manager"
        }
      ]
    },
    {
      "name": "addDeprecations",
      "params": [
        {
          "name": "deprecations"
        }
      ]
    },
    {
      "name": "addElementReference",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the reference\n"
        },
        {
          "name": "domNode",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "addElementReferenceOnDemand",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the reference\n"
        },
        {
          "name": "domNode",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "addListener",
      "params": [
        {
          "name": "eventName",
          "type": "String/Object",
          "description": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes or the *name* of\nthe method within the specified `{@link #cfg!scope scope}`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n"
        },
        {
          "name": "order",
          "type": "String",
          "description": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n"
        },
        {
          "name": "caller",
          "description": "\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n"
        }
      ]
    },
    {
      "name": "addManagedListener",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item to which to add\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`{@link #cfg!scope scope}`.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe {@link Ext.util.Observable#method!addListener addListener} options.\n"
        },
        {
          "name": "noDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "addPlugin",
      "params": [
        {
          "name": "plugin",
          "type": "Object/String/Ext.plugin.Abstract",
          "description": "The plugin or config object or\nalias to add.\n"
        }
      ]
    },
    {
      "name": "afterEdit"
    },
    {
      "name": "afterErase"
    },
    {
      "name": "afterRender"
    },
    {
      "name": "alignTo",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "animateActiveItem",
      "params": [
        {
          "name": "activeItem",
          "type": "Object/Number",
          "description": "The item or item index to make active.\n"
        },
        {
          "name": "animation",
          "type": "Object/Ext.layout.card.fx.Abstract",
          "description": "Card animation configuration or\ninstance.\n"
        }
      ]
    },
    {
      "name": "applyActiveItem",
      "params": [
        {
          "name": "activeItem"
        },
        {
          "name": "currentActiveItem"
        }
      ]
    },
    {
      "name": "applyBind",
      "params": [
        {
          "name": "binds",
          "type": "String/Object"
        },
        {
          "name": "currentBindings",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyCentered",
      "params": [
        {
          "name": "centered",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "applyControl",
      "params": [
        {
          "name": "selectors"
        }
      ]
    },
    {
      "name": "applyItemDefaults",
      "params": [
        {
          "name": "item",
          "type": "Object/Ext.Component",
          "description": "The item to apply the defaults to.\n"
        }
      ]
    },
    {
      "name": "applyMasked",
      "params": [
        {
          "name": "masked",
          "type": "Boolean/Object/String/Ext.Mask/Ext.LoadMask"
        }
      ]
    },
    {
      "name": "applyPlugins",
      "params": [
        {
          "name": "plugins",
          "type": "String[]/Object[]/Ext.plugin.Abstract[]",
          "description": "The new plugins to use.\n"
        },
        {
          "name": "oldPlugins",
          "type": "Ext.plugin.Abstract[]",
          "description": "The existing plugins in use.\n"
        }
      ]
    },
    {
      "name": "applySession",
      "params": [
        {
          "name": "session",
          "type": "Object"
        }
      ]
    },
    {
      "name": "applyStyle",
      "params": [
        {
          "name": "style"
        },
        {
          "name": "oldStyle"
        }
      ]
    },
    {
      "name": "applyTpl",
      "params": [
        {
          "name": "tpl"
        }
      ]
    },
    {
      "name": "applyViewModel",
      "params": [
        {
          "name": "viewModel",
          "type": "String/Object/Ext.app.ViewModel"
        }
      ]
    },
    {
      "name": "attachNameRef",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component",
          "description": "The component to reference.\n"
        }
      ]
    },
    {
      "name": "attachReference",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component",
          "description": "The component to reference.\n"
        }
      ]
    },
    {
      "name": "autoSize"
    },
    {
      "name": "beforeInitialize"
    },
    {
      "name": "blur"
    },
    {
      "name": "bubble",
      "params": [
        {
          "name": "fn",
          "type": "Function",
          "description": "The function to call\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope of the function. Defaults to current node.\n"
        },
        {
          "name": "args",
          "type": "Array",
          "description": "The args to call the function with. Defaults to passing the current\ncomponent.\n"
        }
      ]
    },
    {
      "name": "callOverridden",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments",
          "description": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callOverridden(arguments)`\n"
        }
      ]
    },
    {
      "name": "callParent",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments",
          "description": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callParent(arguments)`\n"
        }
      ]
    },
    {
      "name": "callSuper",
      "params": [
        {
          "name": "args",
          "type": "Array/Arguments",
          "description": "The arguments, either an array or the `arguments` object\nfrom the current method, for example: `this.callSuper(arguments)`\n"
        }
      ]
    },
    {
      "name": "center",
      "params": []
    },
    {
      "name": "child",
      "params": [
        {
          "name": "selector",
          "type": "String/Ext.Component",
          "description": "An Ext.ComponentQuery selector. If no selector is\nspecified, the first child will be returned.\n"
        }
      ]
    },
    {
      "name": "clearDelegatedListeners"
    },
    {
      "name": "clearListeners"
    },
    {
      "name": "clearManagedListeners"
    },
    {
      "name": "constructor",
      "params": [
        {
          "name": "config",
          "type": "Object",
          "description": "The standard configuration object.\n"
        }
      ]
    },
    {
      "name": "createPlugin",
      "params": [
        {
          "name": "config",
          "type": "String/Object/Ext.plugin.Abstract",
          "description": "The plugin type, config\nobject or instance.\n"
        }
      ]
    },
    {
      "name": "createRelayer",
      "params": [
        {
          "name": "newName",
          "type": "String",
          "description": "The name under which to re-fire the passed parameters.\n"
        },
        {
          "name": "beginEnd",
          "type": "Array",
          "description": "The caller can specify on which indices to slice.\n"
        }
      ]
    },
    {
      "name": "destroy"
    },
    {
      "name": "destroyMembers",
      "params": [
        {
          "name": "args",
          "type": "String...",
          "description": "One or more names of the properties to destroy and remove from\nthe object.\n"
        }
      ]
    },
    {
      "name": "destroyPlugin",
      "params": [
        {
          "name": "plugin",
          "type": "String/Ext.plugin.Abstract",
          "description": "The plugin or its `{@link #cfg!id id}` to remove.\n"
        }
      ]
    },
    {
      "name": "disable"
    },
    {
      "name": "doAdd",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component"
        },
        {
          "name": "instanced",
          "type": "Boolean",
          "description": "when received.\n"
        }
      ]
    },
    {
      "name": "doAddListener",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "options"
        },
        {
          "name": "order"
        },
        {
          "name": "caller"
        },
        {
          "name": "manager"
        }
      ]
    },
    {
      "name": "doDestroy"
    },
    {
      "name": "doFireDelegatedEvent",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "args"
        }
      ]
    },
    {
      "name": "doFireEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String"
        },
        {
          "name": "args",
          "type": "Array"
        },
        {
          "name": "bubbles",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "doInheritUi"
    },
    {
      "name": "doInsert",
      "params": [
        {
          "name": "index",
          "type": "Number"
        },
        {
          "name": "item",
          "type": "Ext.Component"
        },
        {
          "name": "instanced",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "doUninheritUi"
    },
    {
      "name": "down",
      "params": [
        {
          "name": "selector",
          "type": "String/Ext.Component",
          "description": "An Ext.ComponentQuery selector or Ext.Component.\nIf no selector is\nspecified, the first child will be returned.\n"
        }
      ]
    },
    {
      "name": "enable"
    },
    {
      "name": "enableBubble",
      "params": [
        {
          "name": "eventNames",
          "type": "String/String[]",
          "description": "The event name to bubble, or an Array of event names.\n"
        }
      ]
    },
    {
      "name": "ensureEditor",
      "params": []
    },
    {
      "name": "factoryItem",
      "params": [
        {
          "name": "item",
          "type": "Mixed",
          "description": "The item being added. May be a raw config object or an instanced\nComponent or some other short-hand understood by the container.\n"
        }
      ]
    },
    {
      "name": "findDefaultFocus"
    },
    {
      "name": "findFloatParent",
      "params": [
        {
          "name": "needsShow"
        }
      ]
    },
    {
      "name": "findFocusTarget",
      "params": []
    },
    {
      "name": "findPlugin",
      "params": [
        {
          "name": "type",
          "type": "String",
          "description": "The Plugin's `type` as specified by the class's\n{@link Ext.Class#cfg!alias alias} configuration.\n"
        }
      ]
    },
    {
      "name": "fireAction",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Array",
          "description": "Arguments to pass to handlers and to the action function.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The action function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Event options for the action function.  Accepts any\nof the options of `{@link Ext.util.Observable#method!addListener addListener}`\n"
        },
        {
          "name": "order",
          "type": "String",
          "description": "The order to call the action function relative\ntoo the event handlers (`'before'` or `'after'`).  Note that this option is\nsimply used to sort the action function relative to the event handlers by \"priority\".\nAn order of `'before'` is equivalent to a priority of `99.5`, while an order of\n`'after'` is equivalent to a priority of `-99.5`.  See the `priority` option\nof `{@link Ext.util.Observable#method!addListener addListener}` for more details.\n"
        }
      ]
    },
    {
      "name": "fireEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Object...",
          "description": "Variable number of parameters are passed to handlers.\n"
        }
      ]
    },
    {
      "name": "fireEventArgs",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Object[]",
          "description": "An array of parameters which are passed to handlers.\n"
        }
      ]
    },
    {
      "name": "fireEventedAction",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to fire.\n"
        },
        {
          "name": "args",
          "type": "Array",
          "description": "Arguments to pass to handlers and to the action function.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The action function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "fnArgs",
          "type": "Array/Boolean",
          "description": "Optional arguments for the action `fn`. If not\ngiven, the normal `args` will be used to call `fn`. If `false` is passed, the\n`args` are used but if the first argument is this instance it will be removed\nfrom the args passed to the action function.\n"
        }
      ]
    },
    {
      "name": "focus",
      "params": [
        {
          "name": "selectText",
          "type": "Boolean/Number[]",
          "description": "If applicable, `true` to also select all the text\nin this component, or an array consisting of start and end (defaults to start)\nposition of selection.\n"
        }
      ]
    },
    {
      "name": "getAlignmentInfo",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        }
      ]
    },
    {
      "name": "getAlignRegion",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "getAriaLabelEl",
      "params": [
        {
          "name": "reference",
          "type": "Function/String/String[]",
          "description": "Component reference,\nor array of component references, or a function that should return\nthe proper attribute string. The function will be called in the\ncontext of the labelled component.\n"
        }
      ]
    },
    {
      "name": "getAt",
      "params": [
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the Component to return.\n"
        }
      ]
    },
    {
      "name": "getBubbleParent",
      "params": []
    },
    {
      "name": "getClassCls"
    },
    {
      "name": "getClosestVisibleHeader",
      "params": [
        {
          "name": "index",
          "type": "Number/Ext.grid.column.Column",
          "description": "Position at which to find the closest\nvisible column, or a column for which to find the closest visible sibling.\n"
        }
      ]
    },
    {
      "name": "getColumns",
      "params": [
        {
          "name": "selector"
        }
      ]
    },
    {
      "name": "getComponent",
      "params": [
        {
          "name": "component",
          "type": "String/Number",
          "description": "This parameter may be any of the following:\n\n- {String} : representing the `{@link #cfg!itemId itemId}`\nor `{@link Ext.Component#method!getId id}` of the child component.\n- {Number} : representing the position of the child component\nwithin the `{@link #property-items}` property.\n\nFor additional information see {@link Ext.util.MixedCollection#method!get Ext.util.MixedCollection#get}.\n"
        }
      ]
    },
    {
      "name": "getConfig",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the config property to get.\n"
        },
        {
          "name": "peek",
          "type": "Boolean",
          "description": "`true` to peek at the raw value without calling the getter.\n"
        },
        {
          "name": "ifInitialized",
          "type": "Boolean",
          "description": "`true` to only return the initialized property\nvalue, not the raw config value, and *not* to trigger initialization. Returns\n`undefined` if the property has not yet been initialized.\n"
        }
      ]
    },
    {
      "name": "getController",
      "params": []
    },
    {
      "name": "getCurrentAlignmentInfo"
    },
    {
      "name": "getCurrentConfig"
    },
    {
      "name": "getDockedComponent",
      "params": [
        {
          "name": "component",
          "type": "String/Number",
          "description": "The `{@link #cfg!id id}` or `index` of the component to find.\n"
        }
      ]
    },
    {
      "name": "getDockedItems",
      "params": []
    },
    {
      "name": "getElementConfig",
      "params": []
    },
    {
      "name": "getFirstReferences"
    },
    {
      "name": "getFloatParent",
      "params": []
    },
    {
      "name": "getFloatWrap",
      "params": []
    },
    {
      "name": "getFocusClsEl",
      "params": [
        {
          "name": "focusEl",
          "type": "Ext.dom.Element",
          "description": "Return focus styling element for the given\nfocused element. This is used by Components implementing multiple focusable\nelements.\n"
        }
      ]
    },
    {
      "name": "getFocusEl",
      "params": []
    },
    {
      "name": "getId",
      "params": []
    },
    {
      "name": "getInherited",
      "params": [
        {
          "name": "inner",
          "type": "Boolean",
          "description": "Pass `true` to return `inheritedStateInner` instead\nof the normal `inheritedState` object. This is only needed internally and should\nnot be passed by user code.\n"
        }
      ]
    },
    {
      "name": "getInheritedConfig",
      "params": [
        {
          "name": "property",
          "type": "String",
          "description": "The name of the config property to return.\n"
        },
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "Pass `true` if the property should be ignored if\nfound on this instance. In other words, `true` means the property must be inherited\nand not explicitly set on this instance.\n"
        }
      ]
    },
    {
      "name": "getInitialConfig",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "Name of the config option to return.\n"
        }
      ]
    },
    {
      "name": "getInnerItems",
      "params": []
    },
    {
      "name": "getListOfSummaries",
      "params": []
    },
    {
      "name": "getMaxHeightElement"
    },
    {
      "name": "getModalSibling"
    },
    {
      "name": "getNamedItems",
      "params": []
    },
    {
      "name": "getPlugin",
      "params": [
        {
          "name": "id",
          "type": "String",
          "description": "The `{@link #cfg!id id}` of the plugin.\n"
        }
      ]
    },
    {
      "name": "getPositionedItemTarget",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component",
          "description": "The positioned item being added.\n"
        }
      ]
    },
    {
      "name": "getReferences",
      "params": []
    },
    {
      "name": "getRefItems",
      "params": [
        {
          "name": "deep"
        }
      ]
    },
    {
      "name": "getRefOwner"
    },
    {
      "name": "getRenderTarget",
      "params": []
    },
    {
      "name": "getScrollableClientRegion",
      "params": []
    },
    {
      "name": "getSize",
      "params": []
    },
    {
      "name": "getSortParam",
      "params": []
    },
    {
      "name": "getStateBuilder",
      "params": [
        {
          "name": "cache",
          "type": "Boolean",
          "description": "Pass `true` to return a cached builder.\n"
        }
      ]
    },
    {
      "name": "getStatefulOwner",
      "params": []
    },
    {
      "name": "getTabIndex",
      "params": []
    },
    {
      "name": "getVisibleColumns",
      "params": []
    },
    {
      "name": "getVisibleIndex",
      "params": []
    },
    {
      "name": "getWeight",
      "params": []
    },
    {
      "name": "getXTypes",
      "params": []
    },
    {
      "name": "handleBlurEvent",
      "params": [
        {
          "name": "info"
        }
      ]
    },
    {
      "name": "handleFocusEvent",
      "params": [
        {
          "name": "info"
        }
      ]
    },
    {
      "name": "has",
      "params": [
        {
          "name": "item"
        }
      ]
    },
    {
      "name": "hasCls",
      "params": [
        {
          "name": "className",
          "type": "String",
          "description": "The CSS class to check for.\n"
        }
      ]
    },
    {
      "name": "hasConfig",
      "params": [
        {
          "name": "name",
          "type": "String"
        }
      ]
    },
    {
      "name": "hasInnerItem",
      "params": [
        {
          "name": "item"
        }
      ]
    },
    {
      "name": "hasListener",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The name of the event to check for\n"
        }
      ]
    },
    {
      "name": "hide",
      "params": [
        {
          "name": "animation",
          "type": "Object/Boolean",
          "description": "You can specify an animation here or a bool to use the\n{@link #cfg!hideAnimation #hideAnimation} config.\n"
        }
      ]
    },
    {
      "name": "indexOf",
      "params": [
        {
          "name": "item"
        }
      ]
    },
    {
      "name": "initBindable"
    },
    {
      "name": "initConfig",
      "params": [
        {
          "name": "instanceConfig",
          "type": "Object"
        }
      ]
    },
    {
      "name": "initDragConstraints",
      "params": [
        {
          "name": "draggable",
          "type": "Ext.drag.Source"
        }
      ]
    },
    {
      "name": "initElement"
    },
    {
      "name": "initElementListeners",
      "params": [
        {
          "name": "elementConfig"
        }
      ]
    },
    {
      "name": "initFocusableElement",
      "params": [
        {
          "name": "force"
        }
      ]
    },
    {
      "name": "initFocusableEvents",
      "params": [
        {
          "name": "force"
        }
      ]
    },
    {
      "name": "initialize"
    },
    {
      "name": "initInheritedState",
      "params": [
        {
          "name": "inheritedState"
        }
      ]
    },
    {
      "name": "initKeyMap"
    },
    {
      "name": "initUiReference",
      "params": [
        {
          "name": "referenceName",
          "type": "String"
        },
        {
          "name": "uiCls",
          "type": "String"
        },
        {
          "name": "isInstance",
          "type": "Boolean",
          "description": "pass `false` if this is not an instance-level\nreference\n"
        }
      ]
    },
    {
      "name": "insert",
      "params": [
        {
          "name": "index",
          "type": "Number",
          "description": "The index to insert the Component at.\n"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "The Component to insert.\n"
        }
      ]
    },
    {
      "name": "insertAfter",
      "params": [
        {
          "name": "item"
        },
        {
          "name": "relativeToItem"
        }
      ]
    },
    {
      "name": "insertBefore",
      "params": [
        {
          "name": "item"
        },
        {
          "name": "relativeToItem"
        }
      ]
    },
    {
      "name": "insertFirst",
      "params": [
        {
          "name": "item"
        }
      ]
    },
    {
      "name": "insertFloatedDom",
      "params": [
        {
          "name": "needsShow"
        }
      ]
    },
    {
      "name": "insertInner",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component"
        },
        {
          "name": "index",
          "type": "Number"
        }
      ]
    },
    {
      "name": "insertLast",
      "params": [
        {
          "name": "item"
        }
      ]
    },
    {
      "name": "invalidateInheritedState"
    },
    {
      "name": "is",
      "params": [
        {
          "name": "selector",
          "type": "String",
          "description": "The selector string to test against.\n"
        }
      ]
    },
    {
      "name": "isAncestor",
      "params": [
        {
          "name": "possibleDescendant",
          "type": "Ext.Component",
          "description": "The Component to test for presence\nwithin this Component's subtree.\n"
        }
      ]
    },
    {
      "name": "isBlurring",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "isBound",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The property name to test. Defaults to the\n{@link #property!defaultBindProperty #defaultBindProperty}\n"
        }
      ]
    },
    {
      "name": "isCentered",
      "params": []
    },
    {
      "name": "isDescendantOf",
      "params": [
        {
          "name": "ancestor",
          "type": "Ext.Component",
          "description": "A Component which may contain this Component.\n"
        }
      ]
    },
    {
      "name": "isDestructing",
      "params": []
    },
    {
      "name": "isDisabled",
      "params": []
    },
    {
      "name": "isEnabled",
      "params": []
    },
    {
      "name": "isFocusable",
      "params": [
        {
          "name": "deep",
          "type": "Boolean",
          "description": "Optionally determine if the container itself\nis focusable, or if container's focus is delegated to a child component\nand that child is focusable.\n"
        }
      ]
    },
    {
      "name": "isFocusing",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "isHeighted"
    },
    {
      "name": "isHidden",
      "params": [
        {
          "name": "deep",
          "type": "Boolean/Ext.Widget",
          "description": "`true` to check if this component\nis hidden because a parent container is hidden. Alternatively, a reference to the\ntop-most parent at which to stop climbing.\n"
        }
      ]
    },
    {
      "name": "isHideable"
    },
    {
      "name": "isPainted"
    },
    {
      "name": "isRendered"
    },
    {
      "name": "isSuspended",
      "params": [
        {
          "name": "event",
          "type": "String",
          "description": "The name of the specific event to check\n"
        }
      ]
    },
    {
      "name": "isSyncing",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the property being bound to.\n"
        }
      ]
    },
    {
      "name": "isVisible",
      "params": [
        {
          "name": "deep",
          "type": "Boolean",
          "description": "`true` to check if this component\nis visible and all parents are also visible.\n\nContrast this with the {@link #method!isHidden #isHidden} method which just checks the\nhidden state of the component.\n"
        }
      ]
    },
    {
      "name": "isWidthed"
    },
    {
      "name": "isXType",
      "params": [
        {
          "name": "xtype",
          "type": "String",
          "description": "The xtype to check for this Component.\n"
        },
        {
          "name": "shallow",
          "type": "Boolean",
          "description": "`false` to check whether this Component is descended\nfrom the xtype (this is the default), or `true` to check whether this Component is directly\nof the specified xtype.\n"
        }
      ]
    },
    {
      "name": "link",
      "params": [
        {
          "name": "name",
          "type": "String"
        },
        {
          "name": "value",
          "type": "Object"
        }
      ]
    },
    {
      "name": "loadState",
      "params": [
        {
          "name": "state",
          "type": "Ext.state.Builder"
        },
        {
          "name": "stateful",
          "type": "Object",
          "description": "The stateful properties as an object keyed by config name.\n"
        }
      ]
    },
    {
      "name": "lookup",
      "params": [
        {
          "name": "ref",
          "type": "String",
          "description": "The value of the `{@link #cfg!reference reference}` to lookup.\n"
        }
      ]
    },
    {
      "name": "lookupController",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "`true` to not consider the controller directly attached\nto this view (if it exists).\n"
        }
      ]
    },
    {
      "name": "lookupName",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the descendant to lookup.\n"
        }
      ]
    },
    {
      "name": "lookupNameHolder",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "`false` to return this as the name holder if\nthis instance has set `{@link #cfg!nameHolder nameHolder}`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!name name}` property set by the\nowner of a component that is also a `{@link #cfg!nameHolder nameHolder}` itself. In this case, the\n`{@link #cfg!name name}` connects not to this component but to the parent nameHolder.\n"
        }
      ]
    },
    {
      "name": "lookupReference",
      "params": [
        {
          "name": "ref",
          "type": "String",
          "description": "The name of the reference to lookup.\n"
        }
      ]
    },
    {
      "name": "lookupReferenceHolder",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "`false` to return this as the reference holder if\nthis instance has set `{@link #cfg!referenceHolder referenceHolder}`. Unlike `{@link #method!getInheritedConfig getInheritedConfig}` this method\ndefaults to `true` because it is possible that a `{@link #cfg!reference reference}` property set by the\nowner of a component that is also a `{@link #cfg!referenceHolder referenceHolder}` itself. In this case, the\n`{@link #cfg!reference reference}` connects not to this component but to the parent referenceHolder.\n"
        }
      ]
    },
    {
      "name": "lookupSession",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "Pass `true` to ignore a `{@link #cfg!session session}` configured on\nthis instance and only consider an inherited session.\n"
        }
      ]
    },
    {
      "name": "lookupTpl",
      "params": [
        {
          "name": "name",
          "type": "String",
          "description": "The name of the property that holds the template.\n"
        }
      ]
    },
    {
      "name": "lookupViewModel",
      "params": [
        {
          "name": "skipThis",
          "type": "Boolean",
          "description": "Pass `true` to ignore a `{@link #cfg!viewModel viewModel}` configured on\nthis instance and only consider an inherited view model.\n"
        }
      ]
    },
    {
      "name": "mask",
      "params": [
        {
          "name": "mask"
        }
      ]
    },
    {
      "name": "mon",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item to which to add\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "If the `ename` parameter was an event\nname, this is the handler function or the name of a method on the specified\n`{@link #cfg!scope scope}`.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe {@link Ext.util.Observable#method!addListener addListener} options.\n"
        },
        {
          "name": "noDestroy",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "mun",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item from which to remove\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "If the `ename` parameter was an event name, this is\nthe handler function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        }
      ]
    },
    {
      "name": "on",
      "params": [
        {
          "name": "eventName",
          "type": "String/Object",
          "description": "The name of the event to listen for.\nMay also be an object who's property names are event names.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes or the *name* of\nthe method within the specified `{@link #cfg!scope scope}`.  Will be called with arguments\ngiven to {@link Ext.util.Observable#method!fireEvent Ext.util.Observable#fireEvent} plus the `options` parameter described\nbelow.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope (`this` reference) in which the handler function is\nexecuted. **If omitted, defaults to the object which fired the event.**\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n\n**Note:** The options object will also be passed as the last argument to every\nevent handler.\n\nThis object may contain any of the following properties:\n"
        },
        {
          "name": "order",
          "type": "String",
          "description": "  A shortcut for the `order` event option.  Provided for backward compatibility.\n  Please use the `priority` event option instead.\n"
        },
        {
          "name": "caller",
          "description": "\n**Combining Options**\n\nUsing the options argument, it is possible to combine different types of listeners:\n\nA delayed, one-time listener.\n\n    myPanel.on('hide', this.handleClick, this, {\n        single: true,\n        delay: 100\n    });\n\n**Attaching multiple handlers in 1 call**\n\nThe method also allows for a single argument to be passed which is a config object\ncontaining properties which specify multiple handlers and handler configs.\n\n    grid.on({\n        itemclick: 'onItemClick',\n        itemcontextmenu: grid.onItemContextmenu,\n        destroy: {\n            fn: function () {\n                // function called within the 'altCmp' scope instead of grid\n            },\n            scope: altCmp // unique scope for the destroy handler\n        },\n        scope: grid       // default scope - provided for example clarity\n    });\n\n**Delegate**\n\nThis is a configuration option that you can pass along when registering a handler for\nan event to assist with event delegation. By setting this configuration option\nto a simple selector, the target element will be filtered to look for a\ndescendant of the target. For example:\n\n    var panel = Ext.create({\n        xtype: 'panel',\n        renderTo: document.body,\n        title: 'Delegate Handler Example',\n        frame: true,\n        height: 220,\n        width: 220,\n        html: '<h1 class=\"myTitle\">BODY TITLE</h1>Body content'\n    });\n\n    // The click handler will only be called when the click occurs on the\n    // delegate: h1.myTitle (\"h1\" tag with class \"myTitle\")\n    panel.on({\n        click: function (e) {\n            console.log(e.getTarget().innerHTML);\n        },\n        element: 'body',\n        delegate: 'h1.myTitle'\n     });\n"
        }
      ]
    },
    {
      "name": "onAdded",
      "params": [
        {
          "name": "parent"
        },
        {
          "name": "instanced"
        }
      ]
    },
    {
      "name": "onAfter",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event to listen for.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n"
        }
      ]
    },
    {
      "name": "onBefore",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event to listen for.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The method the event invokes.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "An object containing handler configuration.\n"
        }
      ]
    },
    {
      "name": "onBlur",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onColumnMenuGroupChange",
      "params": [
        {
          "name": "menu"
        },
        {
          "name": "groupName"
        },
        {
          "name": "value"
        }
      ]
    },
    {
      "name": "onFirstItemAdd",
      "params": [
        {
          "name": "item"
        }
      ]
    },
    {
      "name": "onFocus",
      "params": [
        {
          "name": "e"
        }
      ]
    },
    {
      "name": "onFocusEnter",
      "params": [
        {
          "name": "e",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onFocusLeave",
      "params": [
        {
          "name": "e",
          "type": "Ext.event.Event"
        }
      ]
    },
    {
      "name": "onFocusMove",
      "params": [
        {
          "name": "info",
          "type": "Object"
        }
      ]
    },
    {
      "name": "onInheritedAdd",
      "params": [
        {
          "name": "parent"
        },
        {
          "name": "instanced",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "onInheritedRemove",
      "params": [
        {
          "name": "destroying",
          "type": "Boolean",
          "description": "`true` if this item will be destroyed by it's container\n"
        }
      ]
    },
    {
      "name": "onInitialized",
      "params": [
        {
          "name": "fn"
        },
        {
          "name": "scope"
        },
        {
          "name": "args"
        }
      ]
    },
    {
      "name": "onItemAdd",
      "params": [
        {
          "name": "item"
        },
        {
          "name": "index"
        }
      ]
    },
    {
      "name": "onItemMove",
      "params": [
        {
          "name": "item"
        },
        {
          "name": "toIndex"
        },
        {
          "name": "fromIndex"
        }
      ]
    },
    {
      "name": "onItemRemove",
      "params": [
        {
          "name": "item"
        },
        {
          "name": "index"
        },
        {
          "name": "destroying"
        }
      ]
    },
    {
      "name": "onRender"
    },
    {
      "name": "onResize",
      "params": [
        {
          "name": "width",
          "type": "Number",
          "description": "The new width.\n"
        },
        {
          "name": "height",
          "type": "Number",
          "description": "The new height.\n"
        },
        {
          "name": "oldWidth",
          "type": "Number",
          "description": "The previous width.\n"
        },
        {
          "name": "oldHeight",
          "type": "Number",
          "description": "The previous height.\n"
        }
      ]
    },
    {
      "name": "onScrollEnd",
      "params": [
        {
          "name": "x",
          "type": "Number",
          "description": "The current x position\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The current y position\n"
        }
      ]
    },
    {
      "name": "onScrollMove",
      "params": [
        {
          "name": "x",
          "type": "Number",
          "description": "The current x position\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The current y position\n"
        }
      ]
    },
    {
      "name": "onScrollStart",
      "params": [
        {
          "name": "x",
          "type": "Number",
          "description": "The current x position\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The current y position\n"
        }
      ]
    },
    {
      "name": "onStatefulChange"
    },
    {
      "name": "owns",
      "params": [
        {
          "name": "element"
        }
      ]
    },
    {
      "name": "persistState"
    },
    {
      "name": "preprocessShow",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "processElementConfig",
      "params": []
    },
    {
      "name": "processFocusableContainerKeyEvent",
      "params": [
        {
          "name": "e",
          "type": "Ext.util.Event",
          "description": "A keyboard event that is significant to the operation\nof a FocusableContainer.\n"
        }
      ]
    },
    {
      "name": "publishState",
      "params": [
        {
          "name": "property",
          "type": "String",
          "description": "The name of the property to update.\n"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "The value of `property`. Only needed if `property` is given.\n"
        }
      ]
    },
    {
      "name": "query",
      "params": [
        {
          "name": "selector",
          "type": "String",
          "description": "Selector complying to an Ext.ComponentQuery selector.\nIf no selector is specified all items will be returned.\n"
        }
      ]
    },
    {
      "name": "queryBy",
      "params": [
        {
          "name": "fn",
          "type": "Function",
          "description": "The matcher function. It will be called with a single argument,\nthe component being tested.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope in which to run the function. If not specified,\nit will default to the active component.\n"
        }
      ]
    },
    {
      "name": "queryById",
      "params": [
        {
          "name": "id",
          "type": "String",
          "description": "The id to find\n"
        }
      ]
    },
    {
      "name": "readStateObject",
      "params": []
    },
    {
      "name": "realign",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "alignment"
        },
        {
          "name": "options"
        }
      ]
    },
    {
      "name": "relayEvents",
      "params": [
        {
          "name": "origin",
          "type": "Object",
          "description": "The Observable whose events this object is to relay.\n"
        },
        {
          "name": "events",
          "type": "String[]/Object",
          "description": "Array of event names to relay or an Object with key/value\npairs translating to ActualEventName/NewEventName respectively. For example:\n    this.relayEvents(this, {add:'push', remove:'pop'});\n\nWould now redispatch the add event of this as a push event and the remove event\nas a pop event.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "A common prefix to prepend to the event names. For example:\n\n    this.relayEvents(this.getStore(), ['load', 'clear'], 'store');\n\nNow the grid will forward 'load' and 'clear' events of store as 'storeload' and\n'storeclear'.\n"
        }
      ]
    },
    {
      "name": "remove",
      "params": [
        {
          "name": "which",
          "type": "Ext.Component/String/Number/Array",
          "description": "The component instance, id or\nindex to remove or an array of these.\n"
        },
        {
          "name": "destroy",
          "type": "Boolean",
          "description": "`true` to automatically call Component's\n{@link Ext.Component#method!destroy destroy} method.\n"
        }
      ]
    },
    {
      "name": "removeAfterListener"
    },
    {
      "name": "removeAll",
      "params": [
        {
          "name": "destroy",
          "type": "Boolean",
          "description": "Pass `true` to {@link Ext.Component#method!destroy}\neach removed Component. Defaults to `{@link #cfg!autoDestroy autoDestroy}`.\n"
        },
        {
          "name": "everything",
          "type": "Boolean",
          "description": "Pass `true` to completely remove all items including\ndocked, floated and positioned items.\n"
        }
      ]
    },
    {
      "name": "removeAt",
      "params": [
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the Component to remove.\n"
        },
        {
          "name": "destroy",
          "type": "Boolean",
          "description": "`true` to automatically call Component's\n{@link Ext.Component#method!destroy destroy} method.\n"
        }
      ]
    },
    {
      "name": "removeBeforeListener"
    },
    {
      "name": "removeCls",
      "params": [
        {
          "name": "cls",
          "type": "String/String[]",
          "description": "The class(es) to remove.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "Optional prefix to prepend before each class.\n"
        },
        {
          "name": "suffix",
          "type": "String",
          "description": "Optional suffix to append to each class.\n"
        }
      ]
    },
    {
      "name": "removeDelegatedListener",
      "params": [
        {
          "name": "eventName"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        }
      ]
    },
    {
      "name": "removeInner",
      "params": [
        {
          "name": "item",
          "type": "Ext.Component"
        }
      ]
    },
    {
      "name": "removeInnerAt",
      "params": [
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the Component to remove.\n"
        }
      ]
    },
    {
      "name": "removeListener",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The type of event the handler was associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener addListener} call.**\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n"
        },
        {
          "name": "eventOptions",
          "description": "\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n"
        }
      ]
    },
    {
      "name": "removeManagedListener",
      "params": [
        {
          "name": "item",
          "type": "Ext.util.Observable/Ext.dom.Element",
          "description": "The item from which to remove\na listener/listeners.\n"
        },
        {
          "name": "ename",
          "type": "Object/String",
          "description": "The event name, or an object containing event name\nproperties.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "If the `ename` parameter was an event name, this is\nthe handler function.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "If the `ename` parameter was an event name, this is\nthe scope (`this` reference) in which the handler function is executed.\n"
        }
      ]
    },
    {
      "name": "removeManagedListenerItem",
      "params": [
        {
          "name": "isClear",
          "type": "Boolean",
          "description": "True if this is being called during a clear\n"
        },
        {
          "name": "managedListener",
          "type": "Object",
          "description": "The managed listener item\n"
        },
        {
          "name": "item",
          "type": "Object"
        },
        {
          "name": "ename",
          "type": "String"
        },
        {
          "name": "fn",
          "type": "Function"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "See removeManagedListener for other args\n"
        }
      ]
    },
    {
      "name": "removePlugin",
      "params": [
        {
          "name": "plugin",
          "type": "String/Ext.plugin.Abstract",
          "description": "The plugin or its `{@link #cfg!id id}` to remove.\n"
        },
        {
          "name": "destroy",
          "type": "Boolean",
          "description": "Pass `true` to not call `destroy()` on the plugin.\n"
        }
      ]
    },
    {
      "name": "replaceCls",
      "params": [
        {
          "name": "oldCls",
          "type": "String/String[]",
          "description": "The class(es) to remove.\n"
        },
        {
          "name": "newCls",
          "type": "String/String[]",
          "description": "The class(es) to add.\n"
        },
        {
          "name": "prefix",
          "type": "String",
          "description": "Optional prefix to prepend before each class.\n"
        },
        {
          "name": "suffix",
          "type": "String",
          "description": "Optional suffix to append to each class.\n"
        }
      ]
    },
    {
      "name": "resetFloating"
    },
    {
      "name": "resetPositioned"
    },
    {
      "name": "resolveListenerScope",
      "params": [
        {
          "name": "defaultScope",
          "type": "Object",
          "description": "The default scope to return if none is found.\n"
        }
      ]
    },
    {
      "name": "resolveSatelliteListenerScope",
      "params": [
        {
          "name": "satellite",
          "type": "Ext.mixin.Observable"
        },
        {
          "name": "defaultScope",
          "type": "Object"
        }
      ]
    },
    {
      "name": "resumeEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String...",
          "description": "Multiple event names to resume.\n"
        }
      ]
    },
    {
      "name": "resumeEvents",
      "params": [
        {
          "name": "discardQueue",
          "type": "Boolean",
          "description": "`true` to prevent any previously queued events from firing\nwhile we were suspended. See {@link #method!suspendEvents #suspendEvents}.\n"
        }
      ]
    },
    {
      "name": "revertFocus"
    },
    {
      "name": "revertFocusTo",
      "params": [
        {
          "name": "target"
        }
      ]
    },
    {
      "name": "saveState",
      "params": [
        {
          "name": "state",
          "type": "Ext.state.Builder",
          "description": "The state builder to which to save state.\n"
        },
        {
          "name": "stateful",
          "type": "Object",
          "description": "The stateful properties as an object keyed by config name.\n"
        }
      ]
    },
    {
      "name": "setConfig",
      "params": [
        {
          "name": "name",
          "type": "String/Object",
          "description": "The name of the property to set, or a set of key value\npairs to set.\n"
        },
        {
          "name": "value",
          "type": "Object",
          "description": "The value to set for the name parameter.\n"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "setCurrentAlignmentInfo",
      "params": [
        {
          "name": "alignmentInfo"
        }
      ]
    },
    {
      "name": "setListeners",
      "params": [
        {
          "name": "listeners",
          "type": "Object",
          "description": "The listeners\n"
        }
      ]
    },
    {
      "name": "setRendered",
      "params": [
        {
          "name": "rendered",
          "type": "Boolean"
        },
        {
          "name": "root",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "setSize",
      "params": [
        {
          "name": "width",
          "type": "Number",
          "description": "The new width for the Component.\n"
        },
        {
          "name": "height",
          "type": "Number",
          "description": "The new height for the Component.\n"
        }
      ]
    },
    {
      "name": "setSortState",
      "params": [
        {
          "name": "sorter",
          "type": "String/Ext.util.Sorter",
          "description": "A Sorter, or the direction (`'ASC'` or `'DESC'`)\nto display in the header.\n"
        }
      ]
    },
    {
      "name": "setTabIndex",
      "params": [
        {
          "name": "newTabIndex",
          "type": "Number",
          "description": "new tabIndex to set\n"
        },
        {
          "name": "focusEl",
          "type": "HTMLElement"
        }
      ]
    },
    {
      "name": "setVisibility",
      "params": [
        {
          "name": "isVisible"
        }
      ]
    },
    {
      "name": "setXY",
      "params": [
        {
          "name": "x"
        },
        {
          "name": "y"
        },
        {
          "name": "animation"
        }
      ]
    },
    {
      "name": "show",
      "params": [
        {
          "name": "animation",
          "type": "Object/Boolean",
          "description": "You can specify an animation here or a bool to\n                         use the {@link #cfg!showAnimation #showAnimation} config.\n"
        },
        {
          "name": "options",
          "type": "Object"
        }
      ]
    },
    {
      "name": "showAt",
      "params": [
        {
          "name": "x",
          "type": "Number/Number[]/Object",
          "description": "The new x position or array of `[x,y]`, or an\nobject `{x:10, y:10}`.\n"
        },
        {
          "name": "y",
          "type": "Number",
          "description": "The new y position.\n"
        }
      ]
    },
    {
      "name": "showBy",
      "params": [
        {
          "name": "component",
          "type": "Ext.Component",
          "description": "The target component to show this component by.\n"
        },
        {
          "name": "alignment",
          "type": "String",
          "description": "The alignment string, eg: `'tl-bl'`.\n"
        },
        {
          "name": "options",
          "type": "Object/Array",
          "description": "An object containing options for the\n{@link Ext.util.Region#method!alignTo Ext.util.Region#alignTo} method, if an Array is used, it will be assumed to be the\noffset.\n"
        }
      ]
    },
    {
      "name": "sort",
      "params": [
        {
          "name": "direction"
        },
        {
          "name": "mode"
        }
      ]
    },
    {
      "name": "statics",
      "params": []
    },
    {
      "name": "suspendEvent",
      "params": [
        {
          "name": "eventName",
          "type": "String...",
          "description": "Multiple event names to suspend.\n"
        }
      ]
    },
    {
      "name": "suspendEvents",
      "params": [
        {
          "name": "queueSuspended",
          "type": "Boolean",
          "description": "`true` to queue up suspended events to be fired\nafter the {@link #method!resumeEvents #resumeEvents} call instead of discarding all suspended events.\n"
        }
      ]
    },
    {
      "name": "syncAlwaysOnTop",
      "params": [
        {
          "name": "fromMousedown"
        }
      ]
    },
    {
      "name": "syncFloatWrap"
    },
    {
      "name": "syncToolableAlign"
    },
    {
      "name": "toFront",
      "params": [
        {
          "name": "fromMousedown",
          "type": "Boolean"
        }
      ]
    },
    {
      "name": "toggleCls",
      "params": [
        {
          "name": "className",
          "type": "String",
          "description": "The CSS class to toggle.\n"
        },
        {
          "name": "state",
          "type": "Boolean",
          "description": "If specified as `true`, causes the class to be added. If\nspecified as `false`, causes the class to be removed.\n"
        }
      ]
    },
    {
      "name": "toggleSortState"
    },
    {
      "name": "transformStatefulConfig",
      "params": [
        {
          "name": "instanceConfig",
          "type": "Object",
          "description": "The base config object\n"
        },
        {
          "name": "configurator",
          "type": "Ext.Configurator"
        }
      ]
    },
    {
      "name": "triggerInitialized"
    },
    {
      "name": "un",
      "params": [
        {
          "name": "eventName",
          "type": "String",
          "description": "The type of event the handler was associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The handler to remove. **This must be a reference to the function\npassed into the\n{@link Ext.util.Observable#method!addListener addListener} call.**\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for the handler. It\nmust be the same as the scope argument specified in the original call to\n{@link Ext.util.Observable#method!addListener Ext.util.Observable#addListener} or the listener will not be removed.\n"
        },
        {
          "name": "eventOptions",
          "description": "\n**Convenience Syntax**\n\nYou can use the {@link Ext.util.Observable#method!addListener addListener}\n`destroyable: true` config option in place of calling un().  For example:\n\n    var listeners = cmp.on({\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide,\n        destroyable: true\n    });\n\n    // Remove listeners\n    listeners.destroy();\n    // or\n    cmp.un(\n        scope: cmp,\n        afterrender: cmp.onAfterrender,\n        beforehide: cmp.onBeforeHide\n    );\n\n**Exception - DOM event handlers using the element config option**\n\nYou must go directly through the element to detach an event handler attached using\nthe {@link Ext.util.Observable#method!addListener addListener} _element_ option.\n\n    panel.on({\n        element: 'body',\n        click: 'onBodyCLick'\n    });\n\n    panel.body.un({\n        click: 'onBodyCLick'\n    });\n"
        }
      ]
    },
    {
      "name": "unAfter",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event the handler\nwas associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The handler to remove.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Extra options object.\n"
        }
      ]
    },
    {
      "name": "unBefore",
      "params": [
        {
          "name": "eventName",
          "type": "String/String[]/Object",
          "description": "The name of the event the handler\nwas associated with.\n"
        },
        {
          "name": "fn",
          "type": "Function/String",
          "description": "The handler to remove.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The scope originally specified for `fn`.\n"
        },
        {
          "name": "options",
          "type": "Object",
          "description": "Extra options object.\n"
        }
      ]
    },
    {
      "name": "unlink",
      "params": [
        {
          "name": "names",
          "type": "String[]",
          "description": "The names of the linked objects to destroy.\n"
        }
      ]
    },
    {
      "name": "unmask"
    },
    {
      "name": "up",
      "params": [
        {
          "name": "selector",
          "type": "String",
          "description": "The simple selector to test.\n"
        },
        {
          "name": "limit",
          "type": "String/Number/Ext.Component",
          "description": "This may be a selector upon which to stop\nthe upward scan, or a limit of the number of steps, or Component reference to stop on.\n"
        }
      ]
    },
    {
      "name": "updateCls",
      "params": [
        {
          "name": "newCls"
        },
        {
          "name": "oldCls"
        }
      ]
    },
    {
      "name": "updateData",
      "params": [
        {
          "name": "newData"
        }
      ]
    },
    {
      "name": "updateHeight",
      "params": [
        {
          "name": "height"
        }
      ]
    },
    {
      "name": "updateMenuDisabledState"
    },
    {
      "name": "updateSession",
      "params": [
        {
          "name": "session",
          "type": "Ext.data.Session"
        }
      ]
    },
    {
      "name": "updateViewModel",
      "params": [
        {
          "name": "viewModel",
          "type": "Ext.app.ViewModel"
        },
        {
          "name": "oldViewModel",
          "type": "Ext.app.ViewModel"
        }
      ]
    },
    {
      "name": "updateWidth",
      "params": [
        {
          "name": "width"
        }
      ]
    },
    {
      "name": "visitPostOrder",
      "params": [
        {
          "name": "selector",
          "type": "Object",
          "description": "A ComponentQuery selector used to filter candidate nodes before\ncalling the function. An empty string matches any node.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The function to call. Return `false` to abort the traverse.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The context (`this` reference) in which the function is executed.\n"
        },
        {
          "name": "extraArgs",
          "type": "Array",
          "description": "A set of arguments to be appended to the function's argument list\nto pass down extra data known to the caller **after** the node being visited.\n"
        }
      ]
    },
    {
      "name": "visitPreOrder",
      "params": [
        {
          "name": "selector",
          "type": "Object",
          "description": "A ComponentQuery selector used to filter candidate nodes before\ncalling the function. An empty string matches any node.\n"
        },
        {
          "name": "fn",
          "type": "Function",
          "description": "The function to call. Return `false` to abort the traverse.\n"
        },
        {
          "name": "scope",
          "type": "Object",
          "description": "The context (`this` reference) in which the function is executed.\n"
        },
        {
          "name": "extraArgs",
          "type": "Array",
          "description": "A set of arguments to be appended to the function's argument list\nto pass down extra data known to the caller **after** the node being visited.\n"
        }
      ]
    },
    {
      "name": "watchConfig",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "fn"
        },
        {
          "name": "scope"
        }
      ]
    },
    {
      "name": "whenVisible",
      "params": [
        {
          "name": "fn",
          "type": "String",
          "description": "The function to execute on this component.\n"
        },
        {
          "name": "args",
          "type": "Object[]",
          "description": "The arguments to pass.\n"
        }
      ]
    }
  ],
  "events": [
    {
      "name": "activate",
      "params": [
        {
          "name": "newActiveItem",
          "type": "Object",
          "description": "The new active item within the container.\n"
        },
        {
          "name": "this",
          "type": "Ext.Container",
          "description": "The Container instance.\n"
        },
        {
          "name": "oldActiveItem",
          "type": "Object",
          "description": "The old active item within the container.\n"
        }
      ]
    },
    {
      "name": "activeItemchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Container",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Ext.Component/Object/String/Number",
          "description": "The current value of `{@link #cfg!activeItem activeItem}`."
        },
        {
          "name": "oldValue",
          "type": "Ext.Component/Object/String/Number",
          "description": "The previous value of `{@link #cfg!activeItem activeItem}`."
        }
      ]
    },
    {
      "name": "add",
      "params": [
        {
          "name": "this",
          "type": "Ext.Container",
          "description": "The Container instance.\n"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "The item added to the Container.\n"
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the item within the Container.\n"
        }
      ]
    },
    {
      "name": "added",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "container",
          "type": "Ext.Container",
          "description": "Parent Container\n"
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the item within the Container.\n"
        }
      ]
    },
    {
      "name": "beforeactiveItemchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Container",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Ext.Component/Object/String/Number",
          "description": "The current value of `{@link #cfg!activeItem activeItem}`."
        },
        {
          "name": "oldValue",
          "type": "Ext.Component/Object/String/Number",
          "description": "The previous value of `{@link #cfg!activeItem activeItem}`."
        }
      ]
    },
    {
      "name": "beforebottomchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!bottom bottom}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!bottom bottom}`."
        }
      ]
    },
    {
      "name": "beforecenteredchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!centered centered}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!centered centered}`."
        }
      ]
    },
    {
      "name": "beforedisabledchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!disabled disabled}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!disabled disabled}`."
        }
      ]
    },
    {
      "name": "beforedockedchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "String",
          "description": "The current value of `{@link #cfg!docked docked}`."
        },
        {
          "name": "oldValue",
          "type": "String",
          "description": "The previous value of `{@link #cfg!docked docked}`."
        }
      ]
    },
    {
      "name": "beforeheightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!height height}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!height height}`."
        }
      ]
    },
    {
      "name": "beforehiddenchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!hidden hidden}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!hidden hidden}`."
        }
      ]
    },
    {
      "name": "beforehide",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "beforeleftchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!left left}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!left left}`."
        }
      ]
    },
    {
      "name": "beforemaxHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxHeight maxHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxHeight maxHeight}`."
        }
      ]
    },
    {
      "name": "beforemaxWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxWidth maxWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxWidth maxWidth}`."
        }
      ]
    },
    {
      "name": "beforeminHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minHeight minHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minHeight minHeight}`."
        }
      ]
    },
    {
      "name": "beforeminWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minWidth minWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minWidth minWidth}`."
        }
      ]
    },
    {
      "name": "beforeorientationchange"
    },
    {
      "name": "beforerightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!right right}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!right right}`."
        }
      ]
    },
    {
      "name": "beforescrollablechange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean/String/Object",
          "description": "The current value of `{@link #cfg!scrollable scrollable}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean/String/Object",
          "description": "The previous value of `{@link #cfg!scrollable scrollable}`."
        }
      ]
    },
    {
      "name": "beforeshow",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "beforetofront",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component",
          "description": "The component instance\n"
        }
      ]
    },
    {
      "name": "beforetopchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!top top}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!top top}`."
        }
      ]
    },
    {
      "name": "beforewidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!width width}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!width width}`."
        }
      ]
    },
    {
      "name": "blur",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The blur event.\n"
        }
      ]
    },
    {
      "name": "bottomchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!bottom bottom}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!bottom bottom}`."
        }
      ]
    },
    {
      "name": "centeredchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!centered centered}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!centered centered}`."
        }
      ]
    },
    {
      "name": "deactivate",
      "params": [
        {
          "name": "oldActiveItem",
          "type": "Object",
          "description": "The old active item within the container.\n"
        },
        {
          "name": "this",
          "type": "Ext.Container",
          "description": "The Container instance.\n"
        },
        {
          "name": "newActiveItem",
          "type": "Object",
          "description": "The new active item within the container.\n"
        }
      ]
    },
    {
      "name": "destroy"
    },
    {
      "name": "disabledchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!disabled disabled}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!disabled disabled}`."
        }
      ]
    },
    {
      "name": "dockedchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "String",
          "description": "The current value of `{@link #cfg!docked docked}`."
        },
        {
          "name": "oldValue",
          "type": "String",
          "description": "The previous value of `{@link #cfg!docked docked}`."
        }
      ]
    },
    {
      "name": "erased",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "floatingchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "positioned",
          "type": "Boolean",
          "description": "The component's new positioned state. This becomes\n`true` is a component is positioned using the {@link #cfg!top #cfg-top}, {@link #cfg!right #cfg-right},\n{@link #cfg!bottom #cfg-bottom} or {@link #cfg!left #cfg-left} configs.\n"
        }
      ]
    },
    {
      "name": "focus",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component/Ext.Widget"
        },
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The focus event.\n"
        }
      ]
    },
    {
      "name": "focusenter",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The focusenter event.\n"
        }
      ]
    },
    {
      "name": "focusleave",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component"
        },
        {
          "name": "event",
          "type": "Ext.event.Event",
          "description": "The focusleave event.\n"
        }
      ]
    },
    {
      "name": "fullscreen",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "heightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!height height}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!height height}`."
        }
      ]
    },
    {
      "name": "hiddenchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean",
          "description": "The current value of `{@link #cfg!hidden hidden}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean",
          "description": "The previous value of `{@link #cfg!hidden hidden}`."
        }
      ]
    },
    {
      "name": "hide",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "initialize",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "leftchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!left left}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!left left}`."
        }
      ]
    },
    {
      "name": "maxHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxHeight maxHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxHeight maxHeight}`."
        }
      ]
    },
    {
      "name": "maxWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!maxWidth maxWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!maxWidth maxWidth}`."
        }
      ]
    },
    {
      "name": "minHeightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minHeight minHeight}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minHeight minHeight}`."
        }
      ]
    },
    {
      "name": "minWidthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!minWidth minWidth}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!minWidth minWidth}`."
        }
      ]
    },
    {
      "name": "move",
      "params": [
        {
          "name": "this",
          "type": "Ext.Container",
          "description": "The Container instance.\n"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "The item moved within the Container.\n"
        },
        {
          "name": "toIndex",
          "type": "Number",
          "description": "The new index of the item.\n"
        },
        {
          "name": "fromIndex",
          "type": "Number",
          "description": "The old index of the item.\n"
        }
      ]
    },
    {
      "name": "moved",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "container",
          "type": "Ext.Container",
          "description": "Container which holds the component\n"
        },
        {
          "name": "toIndex",
          "type": "Number",
          "description": "The new index of the item.\n"
        },
        {
          "name": "fromIndex",
          "type": "Number",
          "description": "The old index of the item.\n"
        }
      ]
    },
    {
      "name": "orientationchange"
    },
    {
      "name": "painted",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "element",
          "type": "Ext.dom.Element",
          "description": "The component's outer element (this.element)\n"
        }
      ]
    },
    {
      "name": "positionedchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "positioned",
          "type": "Boolean",
          "description": "The component's new positioned state. This becomes\n`true` is a component is positioned using the {@link #cfg!top #cfg-top}, {@link #cfg!right #cfg-right},\n{@link #cfg!bottom #cfg-bottom} or {@link #cfg!left #cfg-left} configs.\n"
        }
      ]
    },
    {
      "name": "remove",
      "params": [
        {
          "name": "this",
          "type": "Ext.Container",
          "description": "The Container instance.\n"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "The item removed from the Container.\n"
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the item that was removed.\n"
        }
      ]
    },
    {
      "name": "removed",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "container",
          "type": "Ext.Container",
          "description": "Container which holds the component\n"
        },
        {
          "name": "index",
          "type": "Number",
          "description": "The index of the item that was removed.\n"
        }
      ]
    },
    {
      "name": "renderedchange",
      "params": [
        {
          "name": "this",
          "type": "Ext.Container",
          "description": "The Container instance.\n"
        },
        {
          "name": "item",
          "type": "Object",
          "description": "The item in the Container.\n"
        },
        {
          "name": "rendered",
          "type": "Boolean",
          "description": "The current rendered status of the item.\n"
        }
      ]
    },
    {
      "name": "resize",
      "params": [
        {
          "name": "element",
          "type": "Ext.dom.Element",
          "description": "The component's outer element (this.element).\n"
        },
        {
          "name": "info",
          "type": "Object",
          "description": "The component's new size parameters.\n"
        }
      ]
    },
    {
      "name": "rightchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!right right}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!right right}`."
        }
      ]
    },
    {
      "name": "scrollablechange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Boolean/String/Object",
          "description": "The current value of `{@link #cfg!scrollable scrollable}`."
        },
        {
          "name": "oldValue",
          "type": "Boolean/String/Object",
          "description": "The previous value of `{@link #cfg!scrollable scrollable}`."
        }
      ]
    },
    {
      "name": "show",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        }
      ]
    },
    {
      "name": "tofront",
      "params": [
        {
          "name": "this",
          "type": "Ext.Component",
          "description": "The component instance\n"
        }
      ]
    },
    {
      "name": "topchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!top top}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!top top}`."
        }
      ]
    },
    {
      "name": "updatedata",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Component",
          "description": "The component firing this event.\n"
        },
        {
          "name": "newData",
          "type": "Object",
          "description": "The new data\n"
        }
      ]
    },
    {
      "name": "widthchange",
      "params": [
        {
          "name": "sender",
          "type": "Ext.Widget",
          "description": "The instance firing this event."
        },
        {
          "name": "value",
          "type": "Number/String",
          "description": "The current value of `{@link #cfg!width width}`."
        },
        {
          "name": "oldValue",
          "type": "Number/String",
          "description": "The previous value of `{@link #cfg!width width}`."
        }
      ]
    }
  ]
}